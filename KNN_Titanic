{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"7ItyWqlbxLAZ"},"outputs":[],"source":["# import python library\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import plotly.express as px"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DPbUPlLuP8w1","executionInfo":{"status":"ok","timestamp":1714149387699,"user_tz":-360,"elapsed":3951,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"019e643f-30ac-49ed-f70d-9eb421079b5c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["# Load Dataset\n","df_full = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Dataset/Titanic.csv')"],"metadata":{"id":"PW2D1-CuyBqN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_full"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"YNyrDZnoyYtf","executionInfo":{"status":"ok","timestamp":1714149387700,"user_tz":-360,"elapsed":146,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"a8a4f90a-13df-417e-c22c-194dbba0a4ae"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     PassengerId  Survived  Pclass  \\\n","0              1         0       3   \n","1              2         1       1   \n","2              3         1       3   \n","3              4         1       1   \n","4              5         0       3   \n","..           ...       ...     ...   \n","886          887         0       2   \n","887          888         1       1   \n","888          889         0       3   \n","889          890         1       1   \n","890          891         0       3   \n","\n","                                                  Name     Sex   Age  SibSp  \\\n","0                              Braund, Mr. Owen Harris    male  22.0      1   \n","1    Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n","2                               Heikkinen, Miss. Laina  female  26.0      0   \n","3         Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n","4                             Allen, Mr. William Henry    male  35.0      0   \n","..                                                 ...     ...   ...    ...   \n","886                              Montvila, Rev. Juozas    male  27.0      0   \n","887                       Graham, Miss. Margaret Edith  female  19.0      0   \n","888           Johnston, Miss. Catherine Helen \"Carrie\"  female   NaN      1   \n","889                              Behr, Mr. Karl Howell    male  26.0      0   \n","890                                Dooley, Mr. Patrick    male  32.0      0   \n","\n","     Parch            Ticket     Fare Cabin Embarked  \n","0        0         A/5 21171   7.2500   NaN        S  \n","1        0          PC 17599  71.2833   C85        C  \n","2        0  STON/O2. 3101282   7.9250   NaN        S  \n","3        0            113803  53.1000  C123        S  \n","4        0            373450   8.0500   NaN        S  \n","..     ...               ...      ...   ...      ...  \n","886      0            211536  13.0000   NaN        S  \n","887      0            112053  30.0000   B42        S  \n","888      2        W./C. 6607  23.4500   NaN        S  \n","889      0            111369  30.0000  C148        C  \n","890      0            370376   7.7500   NaN        Q  \n","\n","[891 rows x 12 columns]"],"text/html":["\n","  <div id=\"df-12d4247b-0d32-4d21-a955-be025f8d26f8\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Braund, Mr. Owen Harris</td>\n","      <td>male</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>A/5 21171</td>\n","      <td>7.2500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n","      <td>female</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>PC 17599</td>\n","      <td>71.2833</td>\n","      <td>C85</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>Heikkinen, Miss. Laina</td>\n","      <td>female</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>STON/O2. 3101282</td>\n","      <td>7.9250</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n","      <td>female</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>113803</td>\n","      <td>53.1000</td>\n","      <td>C123</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Allen, Mr. William Henry</td>\n","      <td>male</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>373450</td>\n","      <td>8.0500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>886</th>\n","      <td>887</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>Montvila, Rev. Juozas</td>\n","      <td>male</td>\n","      <td>27.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>211536</td>\n","      <td>13.0000</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>887</th>\n","      <td>888</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Graham, Miss. Margaret Edith</td>\n","      <td>female</td>\n","      <td>19.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>112053</td>\n","      <td>30.0000</td>\n","      <td>B42</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>888</th>\n","      <td>889</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n","      <td>female</td>\n","      <td>NaN</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>W./C. 6607</td>\n","      <td>23.4500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>889</th>\n","      <td>890</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Behr, Mr. Karl Howell</td>\n","      <td>male</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>111369</td>\n","      <td>30.0000</td>\n","      <td>C148</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>890</th>\n","      <td>891</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Dooley, Mr. Patrick</td>\n","      <td>male</td>\n","      <td>32.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>370376</td>\n","      <td>7.7500</td>\n","      <td>NaN</td>\n","      <td>Q</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>891 rows Ã— 12 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-12d4247b-0d32-4d21-a955-be025f8d26f8')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-12d4247b-0d32-4d21-a955-be025f8d26f8 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-12d4247b-0d32-4d21-a955-be025f8d26f8');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-6eab7043-04ba-4731-a054-80b120b8f014\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6eab7043-04ba-4731-a054-80b120b8f014')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-6eab7043-04ba-4731-a054-80b120b8f014 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_b9a916a4-7e3a-4c44-be81-96acd864f513\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_full')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_b9a916a4-7e3a-4c44-be81-96acd864f513 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_full');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_full","summary":"{\n  \"name\": \"df_full\",\n  \"rows\": 891,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 257,\n        \"min\": 1,\n        \"max\": 891,\n        \"num_unique_values\": 891,\n        \"samples\": [\n          710,\n          440,\n          841\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 891,\n        \"samples\": [\n          \"Moubarek, Master. Halim Gonios (\\\"William George\\\")\",\n          \"Kvillner, Mr. Johan Henrik Johannesson\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.526497332334042,\n        \"min\": 0.42,\n        \"max\": 80.0,\n        \"num_unique_values\": 88,\n        \"samples\": [\n          0.75,\n          22.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ticket\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 681,\n        \"samples\": [\n          \"11774\",\n          \"248740\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49.6934285971809,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          11.2417,\n          51.8625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cabin\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 147,\n        \"samples\": [\n          \"D45\",\n          \"B49\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"S\",\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":162}]},{"cell_type":"code","source":["df_full.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PgXf5NUhya2F","executionInfo":{"status":"ok","timestamp":1714149387701,"user_tz":-360,"elapsed":143,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"27ff4559-4649-478e-da69-a24ad268e457"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 891 entries, 0 to 890\n","Data columns (total 12 columns):\n"," #   Column       Non-Null Count  Dtype  \n","---  ------       --------------  -----  \n"," 0   PassengerId  891 non-null    int64  \n"," 1   Survived     891 non-null    int64  \n"," 2   Pclass       891 non-null    int64  \n"," 3   Name         891 non-null    object \n"," 4   Sex          891 non-null    object \n"," 5   Age          714 non-null    float64\n"," 6   SibSp        891 non-null    int64  \n"," 7   Parch        891 non-null    int64  \n"," 8   Ticket       891 non-null    object \n"," 9   Fare         891 non-null    float64\n"," 10  Cabin        204 non-null    object \n"," 11  Embarked     889 non-null    object \n","dtypes: float64(2), int64(5), object(5)\n","memory usage: 83.7+ KB\n"]}]},{"cell_type":"code","source":["df_full['Survived'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"u4D8qHAXynhf","executionInfo":{"status":"ok","timestamp":1714149387701,"user_tz":-360,"elapsed":136,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"ebff59b7-2ed3-47aa-8977-1653bf885501"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Survived\n","0    549\n","1    342\n","Name: count, dtype: int64"]},"metadata":{},"execution_count":164}]},{"cell_type":"code","source":["# Plot Target Feature\n","sns.countplot(x='Survived', data=df_full)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":449},"id":"JL21p-UU7Dnq","executionInfo":{"status":"ok","timestamp":1714149387702,"user_tz":-360,"elapsed":131,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"830aab67-bdcd-4eca-8e03-396d6d669f01"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["df_full.duplicated().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CW063AjEyquY","executionInfo":{"status":"ok","timestamp":1714149387703,"user_tz":-360,"elapsed":129,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"5f8d1816-f1d1-4fb2-e94c-335fa795258a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":166}]},{"cell_type":"code","source":["df_full.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"snStvQHcytqQ","executionInfo":{"status":"ok","timestamp":1714149387704,"user_tz":-360,"elapsed":124,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"d4cd79e3-c33e-4a79-d65f-7c0238ed9049"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["PassengerId      0\n","Survived         0\n","Pclass           0\n","Name             0\n","Sex              0\n","Age            177\n","SibSp            0\n","Parch            0\n","Ticket           0\n","Fare             0\n","Cabin          687\n","Embarked         2\n","dtype: int64"]},"metadata":{},"execution_count":167}]},{"cell_type":"code","source":["df_full.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"dnIKSZ2j4eAi","executionInfo":{"status":"ok","timestamp":1714149387704,"user_tz":-360,"elapsed":121,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"f9a131bb-d0e1-4358-ac02-ddfa752acc59"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       PassengerId    Survived      Pclass         Age       SibSp  \\\n","count   891.000000  891.000000  891.000000  714.000000  891.000000   \n","mean    446.000000    0.383838    2.308642   29.699118    0.523008   \n","std     257.353842    0.486592    0.836071   14.526497    1.102743   \n","min       1.000000    0.000000    1.000000    0.420000    0.000000   \n","25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n","50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n","75%     668.500000    1.000000    3.000000   38.000000    1.000000   \n","max     891.000000    1.000000    3.000000   80.000000    8.000000   \n","\n","            Parch        Fare  \n","count  891.000000  891.000000  \n","mean     0.381594   32.204208  \n","std      0.806057   49.693429  \n","min      0.000000    0.000000  \n","25%      0.000000    7.910400  \n","50%      0.000000   14.454200  \n","75%      0.000000   31.000000  \n","max      6.000000  512.329200  "],"text/html":["\n","  <div id=\"df-e9f1f106-664d-4387-8182-518fbe997eb7\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>714.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>446.000000</td>\n","      <td>0.383838</td>\n","      <td>2.308642</td>\n","      <td>29.699118</td>\n","      <td>0.523008</td>\n","      <td>0.381594</td>\n","      <td>32.204208</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>257.353842</td>\n","      <td>0.486592</td>\n","      <td>0.836071</td>\n","      <td>14.526497</td>\n","      <td>1.102743</td>\n","      <td>0.806057</td>\n","      <td>49.693429</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>0.420000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>223.500000</td>\n","      <td>0.000000</td>\n","      <td>2.000000</td>\n","      <td>20.125000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>7.910400</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>446.000000</td>\n","      <td>0.000000</td>\n","      <td>3.000000</td>\n","      <td>28.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>14.454200</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>668.500000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>38.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>31.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>891.000000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>80.000000</td>\n","      <td>8.000000</td>\n","      <td>6.000000</td>\n","      <td>512.329200</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e9f1f106-664d-4387-8182-518fbe997eb7')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e9f1f106-664d-4387-8182-518fbe997eb7 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e9f1f106-664d-4387-8182-518fbe997eb7');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ec544b40-9be5-43c5-8388-0ad9250a9429\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ec544b40-9be5-43c5-8388-0ad9250a9429')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ec544b40-9be5-43c5-8388-0ad9250a9429 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df_full\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 320.8159711429855,\n        \"min\": 1.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          891.0,\n          446.0,\n          668.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 314.8713661874558,\n        \"min\": 0.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.3838383838383838,\n          1.0,\n          0.4865924542648575\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 314.2523437079694,\n        \"min\": 0.836071240977049,\n        \"max\": 891.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          891.0,\n          2.308641975308642,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 242.9056731818781,\n        \"min\": 0.42,\n        \"max\": 714.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          29.69911764705882,\n          28.0,\n          714.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 314.4908277465442,\n        \"min\": 0.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          891.0,\n          0.5230078563411896,\n          8.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 314.65971717879,\n        \"min\": 0.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.38159371492704824,\n          6.0,\n          0.8060572211299483\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 330.6256632228578,\n        \"min\": 0.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          32.204207968574636,\n          14.4542,\n          891.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":168}]},{"cell_type":"code","source":["# Filled up missing value with the median\n","Age = df_full['Age'].fillna(value = df_full['Age'].median())"],"metadata":{"id":"6n65EzBSyv_Q"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["Age"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tdG_28jPyzpl","executionInfo":{"status":"ok","timestamp":1714149387705,"user_tz":-360,"elapsed":119,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"f5fb8136-87a8-4497-aaf8-2c62a4132d26"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0      22.0\n","1      38.0\n","2      26.0\n","3      35.0\n","4      35.0\n","       ... \n","886    27.0\n","887    19.0\n","888    28.0\n","889    26.0\n","890    32.0\n","Name: Age, Length: 891, dtype: float64"]},"metadata":{},"execution_count":170}]},{"cell_type":"code","source":["# Drop unnecessary features\n","df_drop = df_full.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked', 'Age'], axis=1, inplace=True)"],"metadata":{"id":"hE6zl3Eey1_Y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_full"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"-VZSL104y48-","executionInfo":{"status":"ok","timestamp":1714149387707,"user_tz":-360,"elapsed":115,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"56c5047d-4ac3-4fc3-ffcc-dec3fd6399d6"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Survived  Pclass     Sex\n","0           0       3    male\n","1           1       1  female\n","2           1       3  female\n","3           1       1  female\n","4           0       3    male\n","..        ...     ...     ...\n","886         0       2    male\n","887         1       1  female\n","888         0       3  female\n","889         1       1    male\n","890         0       3    male\n","\n","[891 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-6ff37f0f-ad41-4b4d-bbb3-f0283a14c21b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>male</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>female</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>female</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>female</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>male</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>886</th>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>male</td>\n","    </tr>\n","    <tr>\n","      <th>887</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>female</td>\n","    </tr>\n","    <tr>\n","      <th>888</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>female</td>\n","    </tr>\n","    <tr>\n","      <th>889</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>male</td>\n","    </tr>\n","    <tr>\n","      <th>890</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>male</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>891 rows Ã— 3 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6ff37f0f-ad41-4b4d-bbb3-f0283a14c21b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6ff37f0f-ad41-4b4d-bbb3-f0283a14c21b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6ff37f0f-ad41-4b4d-bbb3-f0283a14c21b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-9875d3b4-f5a0-4c10-b9c9-47d64436292c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9875d3b4-f5a0-4c10-b9c9-47d64436292c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-9875d3b4-f5a0-4c10-b9c9-47d64436292c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_573dc0a4-7ff9-4d65-abe1-85ca18591585\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_full')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_573dc0a4-7ff9-4d65-abe1-85ca18591585 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_full');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_full","summary":"{\n  \"name\": \"df_full\",\n  \"rows\": 891,\n  \"fields\": [\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":172}]},{"cell_type":"code","source":["# Concate Age with filled values\n","df = pd.concat([df_full, Age], axis=1)"],"metadata":{"id":"rM8uS25By7EX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Apply One Hot Encoder for Sex feature\n","from sklearn.preprocessing import OneHotEncoder\n","ohe = OneHotEncoder(drop='first', sparse=False, dtype=np.int32)"],"metadata":{"id":"FbErqxx0y-WW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_ohe = ohe.fit_transform(df[['Sex']])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ihBKDlgFzC-W","executionInfo":{"status":"ok","timestamp":1714149387709,"user_tz":-360,"elapsed":112,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"3c1773ea-66a3-4bed-b3dd-4b0f96d8290e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["# Show all features value with Encoded value in an array\n","np.hstack((df[['Survived', 'Pclass', 'Age']].values, df_ohe))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"s9KpsSx_zFrM","executionInfo":{"status":"ok","timestamp":1714149387710,"user_tz":-360,"elapsed":107,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"ad793d26-29db-4ea0-fe7f-770ce2e94d25"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 0.,  3., 22.,  1.],\n","       [ 1.,  1., 38.,  0.],\n","       [ 1.,  3., 26.,  0.],\n","       ...,\n","       [ 0.,  3., 28.,  0.],\n","       [ 1.,  1., 26.,  1.],\n","       [ 0.,  3., 32.,  1.]])"]},"metadata":{},"execution_count":176}]},{"cell_type":"code","source":["# Convert array to dataframe and rename Sex column to gender\n","Gender = pd.DataFrame(df_ohe, columns=['Gender'])\n","Gender.head(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"78gqWc52zIS5","executionInfo":{"status":"ok","timestamp":1714149387710,"user_tz":-360,"elapsed":102,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"60dc873b-7e6a-40cb-8416-2546274ff54e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Gender\n","0       1\n","1       0\n","2       0\n","3       0\n","4       1"],"text/html":["\n","  <div id=\"df-01ca92f1-9264-48d5-894b-9c15d0feadf6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Gender</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-01ca92f1-9264-48d5-894b-9c15d0feadf6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-01ca92f1-9264-48d5-894b-9c15d0feadf6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-01ca92f1-9264-48d5-894b-9c15d0feadf6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-67b34429-f86d-4215-9068-5338c6bcf75e\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-67b34429-f86d-4215-9068-5338c6bcf75e')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-67b34429-f86d-4215-9068-5338c6bcf75e button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"Gender","summary":"{\n  \"name\": \"Gender\",\n  \"rows\": 891,\n  \"fields\": [\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":177}]},{"cell_type":"code","source":["# Concate gender column and drop sex column\n","dataset = pd.concat([df,Gender], axis=1).drop(columns=['Sex'])\n","dataset"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"8zBoYQCvzZpk","executionInfo":{"status":"ok","timestamp":1714149387711,"user_tz":-360,"elapsed":99,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"26247d7f-d9fc-47b4-c1c0-06c1b2c25d48"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Survived  Pclass   Age  Gender\n","0           0       3  22.0       1\n","1           1       1  38.0       0\n","2           1       3  26.0       0\n","3           1       1  35.0       0\n","4           0       3  35.0       1\n","..        ...     ...   ...     ...\n","886         0       2  27.0       1\n","887         1       1  19.0       0\n","888         0       3  28.0       0\n","889         1       1  26.0       1\n","890         0       3  32.0       1\n","\n","[891 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-105adfa8-13da-4c2f-9b0b-b3f7716ecdd8\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Age</th>\n","      <th>Gender</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>38.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>886</th>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>27.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>887</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>19.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>888</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>28.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>889</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>26.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>890</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>32.0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>891 rows Ã— 4 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-105adfa8-13da-4c2f-9b0b-b3f7716ecdd8')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-105adfa8-13da-4c2f-9b0b-b3f7716ecdd8 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-105adfa8-13da-4c2f-9b0b-b3f7716ecdd8');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-15daa222-3c0b-41b2-a5b0-3bf4bbea49b1\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-15daa222-3c0b-41b2-a5b0-3bf4bbea49b1')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-15daa222-3c0b-41b2-a5b0-3bf4bbea49b1 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_24ff10c6-776b-49f5-a0d9-4862dc12ff5f\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('dataset')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_24ff10c6-776b-49f5-a0d9-4862dc12ff5f button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('dataset');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"dataset","summary":"{\n  \"name\": \"dataset\",\n  \"rows\": 891,\n  \"fields\": [\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.019696550973201,\n        \"min\": 0.42,\n        \"max\": 80.0,\n        \"num_unique_values\": 88,\n        \"samples\": [\n          0.75,\n          22.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":178}]},{"cell_type":"code","source":["# Rename dataset to df\n","df = dataset\n","df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"jUNDOyecz7TZ","executionInfo":{"status":"ok","timestamp":1714149388721,"user_tz":-360,"elapsed":1106,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"3c657691-833b-4008-92d4-bb1821c68e49"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Survived  Pclass   Age  Gender\n","0           0       3  22.0       1\n","1           1       1  38.0       0\n","2           1       3  26.0       0\n","3           1       1  35.0       0\n","4           0       3  35.0       1\n","..        ...     ...   ...     ...\n","886         0       2  27.0       1\n","887         1       1  19.0       0\n","888         0       3  28.0       0\n","889         1       1  26.0       1\n","890         0       3  32.0       1\n","\n","[891 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-ec8f69a1-43e4-4f6a-a0dd-6d20e417fe27\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Age</th>\n","      <th>Gender</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>38.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>886</th>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>27.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>887</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>19.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>888</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>28.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>889</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>26.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>890</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>32.0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>891 rows Ã— 4 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ec8f69a1-43e4-4f6a-a0dd-6d20e417fe27')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ec8f69a1-43e4-4f6a-a0dd-6d20e417fe27 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ec8f69a1-43e4-4f6a-a0dd-6d20e417fe27');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-0698514a-776b-4e9b-a007-a9bcd4e1f94d\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0698514a-776b-4e9b-a007-a9bcd4e1f94d')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-0698514a-776b-4e9b-a007-a9bcd4e1f94d button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_70b576b2-0cd4-4c8e-870d-fe11ce9eb777\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_70b576b2-0cd4-4c8e-870d-fe11ce9eb777 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 891,\n  \"fields\": [\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.019696550973201,\n        \"min\": 0.42,\n        \"max\": 80.0,\n        \"num_unique_values\": 88,\n        \"samples\": [\n          0.75,\n          22.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":179}]},{"cell_type":"code","source":["# Define input and output/target features\n","X = df.drop(['Survived'], axis=1)\n","y = df['Survived']"],"metadata":{"id":"UVhzVd5M0Ix2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Apply Scaler for input/independent features\n","from sklearn.preprocessing import StandardScaler\n","scale = StandardScaler()"],"metadata":{"id":"_UNaFXNv2jfI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Scale input/independent features\n","X_scale = scale.fit_transform(X)\n","X_scale"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sL78-PpB2lW9","executionInfo":{"status":"ok","timestamp":1714149388728,"user_tz":-360,"elapsed":88,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"1a9986ed-2315-4714-b5a2-9c8e09072589"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 0.82737724, -0.56573646,  0.73769513],\n","       [-1.56610693,  0.66386103, -1.35557354],\n","       [ 0.82737724, -0.25833709, -1.35557354],\n","       ...,\n","       [ 0.82737724, -0.1046374 , -1.35557354],\n","       [-1.56610693, -0.25833709,  0.73769513],\n","       [ 0.82737724,  0.20276197,  0.73769513]])"]},"metadata":{},"execution_count":182}]},{"cell_type":"code","source":["# Apply SMOTE on X and y\n","from imblearn.over_sampling import SMOTE\n","smote = SMOTE()"],"metadata":{"id":"UhpJD28v3vVB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_resampled, y_resampled = smote.fit_resample(X_scale, y)"],"metadata":{"id":"9-8RvvuE8-CT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Apply PCA for column reduction\n","from sklearn.decomposition import PCA\n","pca = PCA(n_components = 2)"],"metadata":{"id":"Bux9yyFP9vsP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_pca = pca.fit_transform(X_scale)\n","X_resampled_pca = pca.transform(X_resampled)"],"metadata":{"id":"rJKLQxsB9yVy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Apply Scatter plot for visualize data\n","plt.figure(figsize=(12,6))\n","\n","plt.subplot(1,2,1)\n","plt.scatter(X_pca[y == 0, 0], X_pca[y == 0, 1], label='Not Survived', alpha=0.5)\n","plt.scatter(X_pca[y == 1, 0], X_pca[y == 1, 1], label='Survived', alpha=0.5)\n","plt.title('Original Titanic Dataset')\n","plt.xlabel('Principal Component 1')\n","plt.ylabel('Principal Component 2')\n","plt.legend()\n","\n","plt.subplot(1, 2, 2)\n","plt.scatter(X_resampled_pca[y_resampled == 0, 0], X_resampled_pca[y_resampled == 0, 1], label='Not Survived', alpha=0.5)\n","plt.scatter(X_resampled_pca[y_resampled == 1, 0], X_resampled_pca[y_resampled == 1, 1], label='Survived', alpha=0.5)\n","plt.title('Balanced Titanic Dataset After SMOTE')\n","plt.xlabel('Principal Component 1')\n","plt.ylabel('Principal Component 2')\n","plt.legend()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":581},"id":"_yHgoiaZ_DqO","executionInfo":{"status":"ok","timestamp":1714149388736,"user_tz":-360,"elapsed":73,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"fff673e3-9d98-4276-8e90-91f8d0a589f5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.legend.Legend at 0x7b786fd04c10>"]},"metadata":{},"execution_count":187},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["list(y).count(1), list(y_resampled).count(1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6REbIhf5_F6w","executionInfo":{"status":"ok","timestamp":1714149388736,"user_tz":-360,"elapsed":47,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"d92dead6-6e8c-42ac-82e5-aab34aadbcfb"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(342, 549)"]},"metadata":{},"execution_count":188}]},{"cell_type":"code","source":["# Apply SMOTE on Train and Test Data\n","smote = SMOTE(random_state=42)\n","X_resampled, y_resampled = smote.fit_resample(X_scale, y)"],"metadata":{"id":"PlDGBBU2IB5x"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Split train and test data\n","from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)"],"metadata":{"id":"_OGtZdazH6gc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["list(y_train).count(0), list(y_train).count(1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0WLVSJ3iDnpz","executionInfo":{"status":"ok","timestamp":1714149389351,"user_tz":-360,"elapsed":64,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"6593793b-ed58-4de1-e637-797930254c2b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(446, 432)"]},"metadata":{},"execution_count":191}]},{"cell_type":"code","source":["list(y_test).count(1), list(y_test).count(1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IbyRBxLdEpZV","executionInfo":{"status":"ok","timestamp":1714149389351,"user_tz":-360,"elapsed":61,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"7248c70b-39db-48bc-c6ac-5f2428b9674c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(117, 117)"]},"metadata":{},"execution_count":192}]},{"cell_type":"code","source":["list(y_train).count(0), list(y_resampled).count(1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"u3nTU105PAOr","executionInfo":{"status":"ok","timestamp":1714149389352,"user_tz":-360,"elapsed":49,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"243386ec-db32-46da-a356-407e6aa03758"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(446, 549)"]},"metadata":{},"execution_count":193}]},{"cell_type":"code","source":["list(y_resampled).count(0), list(y_resampled).count(1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7WaOujL4E6eM","executionInfo":{"status":"ok","timestamp":1714149389357,"user_tz":-360,"elapsed":49,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"e55dc732-977b-4b11-929c-da56082b056c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(549, 549)"]},"metadata":{},"execution_count":194}]},{"cell_type":"code","source":["# Apply KNN\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.metrics import accuracy_score, f1_score"],"metadata":{"id":"wU-Ygvt_PYvx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Observe KNN performance and pick the best performed K value\n","accuracy_train_list = []\n","accuracy_test_list  = []\n","f1_train_list       = []\n","f1_test_list        = []\n","\n","for i in range(3, 13):\n","  print('k', i)\n","\n","  KNN = KNeighborsClassifier(n_neighbors=i)\n","  KNN.fit(X_resampled, y_resampled)\n","\n","  y_pred_train        = KNN.predict(X_train)\n","\n","  accuracy_train      = accuracy_score(y_pred_train, y_train)\n","  accuracy_train_list.append(accuracy_train)\n","\n","  f1_train = f1_score(y_pred_train, y_train)\n","  f1_train_list.append(f1_train)\n","\n","\n","\n","  y_pred_test = KNN.predict(X_test)\n","\n","  accuracy_test = accuracy_score(y_pred_test, y_test)\n","  accuracy_test_list.append(accuracy_test)\n","\n","  f1_test = f1_score(y_pred_test, y_test)\n","  f1_test_list.append(f1_test)\n","\n","  print(accuracy_train, accuracy_test)\n","  print(f1_train, f1_test, '\\n')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fuqLYRjmLSnL","executionInfo":{"status":"ok","timestamp":1714149389358,"user_tz":-360,"elapsed":37,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"ca261b42-eaf7-433e-af52-987dd819bbcd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["k 3\n","0.8428246013667426 0.8545454545454545\n","0.839907192575406 0.865546218487395 \n","\n","k 4\n","0.8348519362186788 0.8772727272727273\n","0.8171500630517025 0.8778280542986426 \n","\n","k 5\n","0.8451025056947609 0.8590909090909091\n","0.8365384615384616 0.8646288209606988 \n","\n","k 6\n","0.8394077448747153 0.8727272727272727\n","0.8269938650306747 0.8738738738738739 \n","\n","k 7\n","0.837129840546697 0.8727272727272727\n","0.830367734282325 0.8782608695652174 \n","\n","k 8\n","0.8302961275626424 0.8727272727272727\n","0.8162762022194822 0.875 \n","\n","k 9\n","0.8348519362186788 0.8636363636363636\n","0.8279952550415185 0.8695652173913043 \n","\n","k 10\n","0.826879271070615 0.8545454545454545\n","0.8132678132678133 0.8545454545454545 \n","\n","k 11\n","0.8234624145785877 0.8590909090909091\n","0.8143712574850298 0.8634361233480177 \n","\n","k 12\n","0.8223234624145785 0.8545454545454545\n","0.8097560975609756 0.8571428571428571 \n","\n"]}]},{"cell_type":"code","source":["# Plot on KNN result\n","plt.plot(list(range(3, 13)),f1_train_list)\n","plt.plot(list(range(3, 13)),f1_test_list)\n","plt.legend('Train', 'Test')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":499},"id":"hbzTl3j5TExo","executionInfo":{"status":"ok","timestamp":1714149390515,"user_tz":-360,"elapsed":1180,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"7e82f160-9448-4173-bcea-6bf47becd898"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-197-4eca0d1b8dee>:4: UserWarning: Legend does not support handles for str instances.\n","A proxy artist may be used instead.\n","See: https://matplotlib.org/stable/tutorials/intermediate/legend_guide.html#controlling-the-legend-entries\n","  plt.legend('Train', 'Test')\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Apply KNN on best performed K value\n","KNN = KNeighborsClassifier(n_neighbors=7)\n","KNN.fit(X_train, y_train)\n","\n","y_pred_train = KNN.predict(X_train)\n","accuracy_train = accuracy_score(y_pred_train, y_train)\n","f1_train = f1_score(y_pred_train, y_train)\n","\n","y_pred_test = KNN.predict(X_test)\n","accuracy_test = accuracy_score(y_pred_test, y_test)\n","f1_test = f1_score(y_pred_test, y_test)"],"metadata":{"id":"8Xhd7mQ5Veg-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Apply Classification Report\n","from sklearn.metrics import classification_report\n","target_names = ['Survived', 'Not Survived']"],"metadata":{"id":"PgU4RiSjeqfv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Show the over all performance on train data\n","print('Train Data of KNN: ','\\n')\n","print('Accuracy on Train Data: ', accuracy_train, '\\n')\n","print('F1_Score on Train Data: ', f1_train, '\\n')\n","print('Classification Report on Train Data: ', '\\n', '\\n', classification_report(y_train, y_pred_train, target_names=target_names))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OAehQpGMfx-W","executionInfo":{"status":"ok","timestamp":1714150073228,"user_tz":-360,"elapsed":637,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"8a01e737-1124-4bf8-9a87-dc1ad9b0969e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Train Data of KNN:  \n","\n","Accuracy on Train Data:  0.8132118451025057 \n","\n","F1_Score on Train Data:  0.8004866180048661 \n","\n","Classification Report on Train Data:  \n"," \n","               precision    recall  f1-score   support\n","\n","    Survived       0.79      0.86      0.82       446\n","Not Survived       0.84      0.76      0.80       432\n","\n","    accuracy                           0.81       878\n","   macro avg       0.82      0.81      0.81       878\n","weighted avg       0.82      0.81      0.81       878\n","\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"PF5eE_qADjj2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Show the over all performance on test data\n","print('Test Data of KNN: ','\\n')\n","print('Accuracy on Test Data: ', accuracy_test, '\\n' )\n","print('F1 Score on Test Data: ', f1_test, '\\n')\n","print('Classification Report on Test Data: ', '\\n','\\n', classification_report(y_test, y_pred_test, target_names=target_names))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QLoNymYsiOsJ","executionInfo":{"status":"ok","timestamp":1714150107161,"user_tz":-360,"elapsed":1258,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"d126f60e-4a1b-4ee2-a21b-79da2572ac81"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Test Data of KNN:  \n","\n","Accuracy on Test Data:  0.8181818181818182 \n","\n","F1 Score on Test Data:  0.8290598290598291 \n","\n","Classification Report on Test Data:  \n"," \n","               precision    recall  f1-score   support\n","\n","    Survived       0.81      0.81      0.81       103\n","Not Survived       0.83      0.83      0.83       117\n","\n","    accuracy                           0.82       220\n","   macro avg       0.82      0.82      0.82       220\n","weighted avg       0.82      0.82      0.82       220\n","\n"]}]},{"cell_type":"code","source":["# Apply Confusion Matrix\n","from sklearn.metrics import confusion_matrix\n","c_train = confusion_matrix(y_pred_train, y_train)\n","c_test  = confusion_matrix(y_pred_test, y_test)"],"metadata":{"id":"g9INQRjCjjQL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Results of Confusion Matrix on train and test data\n","print('Confusion Matrix on Train Data: ','\\n', c_train, '\\n')\n","print('Confusion Matrix on Test  Data: ', '\\n', c_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"H3xm_RiSllRJ","executionInfo":{"status":"ok","timestamp":1714150151830,"user_tz":-360,"elapsed":715,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"982e7bd8-a142-4c42-c185-f597036017b9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion Matrix on Train Data:  \n"," [[385 103]\n"," [ 61 329]] \n","\n","Confusion Matrix on Test  Data:  \n"," [[83 20]\n"," [20 97]]\n"]}]},{"cell_type":"code","source":["# Apply heatmap on train Data\n","sns.heatmap(c_train, annot=True)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":430},"id":"2MHXWluhlpdu","executionInfo":{"status":"ok","timestamp":1714150156068,"user_tz":-360,"elapsed":9,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"65d04614-bef8-4b44-f046-b04f4f3541d1"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"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\n"},"metadata":{}}]},{"cell_type":"code","source":["# Apply heatmap on test Data\n","sns.heatmap(c_test, annot=True)\n","plt.show()"],"metadata":{"id":"sXvreWG_my4m","colab":{"base_uri":"https://localhost:8080/","height":430},"executionInfo":{"status":"ok","timestamp":1714150161852,"user_tz":-360,"elapsed":615,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"1e911e9d-2793-4a90-b507-71741e677644"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"eTF134ICnE7V"},"execution_count":null,"outputs":[]}]}