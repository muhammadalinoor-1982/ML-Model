{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"Vp15-41GDBZL"},"outputs":[],"source":["# import python library\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HvABwI54MQ9H","executionInfo":{"status":"ok","timestamp":1714359671676,"user_tz":-360,"elapsed":43289,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"ce217f12-6332-4617-962d-1f52da13b49b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["# Load Dataset\n","df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Dataset/iris.csv')"],"metadata":{"id":"eam-JtmsDZm3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"t4iGcrDkDyCC","executionInfo":{"status":"ok","timestamp":1714359672460,"user_tz":-360,"elapsed":23,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"d8a408fe-a3d5-442f-e958-69fc8f4766ea"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Unnamed: 0  sepal_length  sepal_width  petal_length  petal_width  \\\n","0             0           5.1          3.5           1.4          0.2   \n","1             1           4.9          3.0           1.4          0.2   \n","2             2           4.7          3.2           1.3          0.2   \n","3             3           4.6          3.1           1.5          0.2   \n","4             4           5.0          3.6           1.4          0.2   \n","..          ...           ...          ...           ...          ...   \n","145         145           6.7          3.0           5.2          2.3   \n","146         146           6.3          2.5           5.0          1.9   \n","147         147           6.5          3.0           5.2          2.0   \n","148         148           6.2          3.4           5.4          2.3   \n","149         149           5.9          3.0           5.1          1.8   \n","\n","        species  \n","0        setosa  \n","1        setosa  \n","2        setosa  \n","3        setosa  \n","4        setosa  \n","..          ...  \n","145  versicolor  \n","146  versicolor  \n","147  versicolor  \n","148  versicolor  \n","149  versicolor  \n","\n","[150 rows x 6 columns]"],"text/html":["\n","  <div id=\"df-7bbb8e69-8274-4e39-93ed-bc0e13f3a665\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>sepal_length</th>\n","      <th>sepal_width</th>\n","      <th>petal_length</th>\n","      <th>petal_width</th>\n","      <th>species</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>5.1</td>\n","      <td>3.5</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>setosa</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>4.9</td>\n","      <td>3.0</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>setosa</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>4.7</td>\n","      <td>3.2</td>\n","      <td>1.3</td>\n","      <td>0.2</td>\n","      <td>setosa</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>4.6</td>\n","      <td>3.1</td>\n","      <td>1.5</td>\n","      <td>0.2</td>\n","      <td>setosa</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>5.0</td>\n","      <td>3.6</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>setosa</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>145</th>\n","      <td>145</td>\n","      <td>6.7</td>\n","      <td>3.0</td>\n","      <td>5.2</td>\n","      <td>2.3</td>\n","      <td>versicolor</td>\n","    </tr>\n","    <tr>\n","      <th>146</th>\n","      <td>146</td>\n","      <td>6.3</td>\n","      <td>2.5</td>\n","      <td>5.0</td>\n","      <td>1.9</td>\n","      <td>versicolor</td>\n","    </tr>\n","    <tr>\n","      <th>147</th>\n","      <td>147</td>\n","      <td>6.5</td>\n","      <td>3.0</td>\n","      <td>5.2</td>\n","      <td>2.0</td>\n","      <td>versicolor</td>\n","    </tr>\n","    <tr>\n","      <th>148</th>\n","      <td>148</td>\n","      <td>6.2</td>\n","      <td>3.4</td>\n","      <td>5.4</td>\n","      <td>2.3</td>\n","      <td>versicolor</td>\n","    </tr>\n","    <tr>\n","      <th>149</th>\n","      <td>149</td>\n","      <td>5.9</td>\n","      <td>3.0</td>\n","      <td>5.1</td>\n","      <td>1.8</td>\n","      <td>versicolor</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>150 rows Ã— 6 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7bbb8e69-8274-4e39-93ed-bc0e13f3a665')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-7bbb8e69-8274-4e39-93ed-bc0e13f3a665 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-7bbb8e69-8274-4e39-93ed-bc0e13f3a665');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-7725c97e-9805-4960-9398-a08261864bd9\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7725c97e-9805-4960-9398-a08261864bd9')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-7725c97e-9805-4960-9398-a08261864bd9 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_a42194d7-fe5e-4c86-8e46-a19005012de5\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_a42194d7-fe5e-4c86-8e46-a19005012de5 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 150,\n  \"fields\": [\n    {\n      \"column\": \"Unnamed: 0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 43,\n        \"min\": 0,\n        \"max\": 149,\n        \"num_unique_values\": 150,\n        \"samples\": [\n          73,\n          18,\n          118\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sepal_length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.828066127977863,\n        \"min\": 4.3,\n        \"max\": 7.9,\n        \"num_unique_values\": 35,\n        \"samples\": [\n          6.2,\n          4.5,\n          5.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sepal_width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4358662849366982,\n        \"min\": 2.0,\n        \"max\": 4.4,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          2.3,\n          4.0,\n          3.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal_length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7652982332594662,\n        \"min\": 1.0,\n        \"max\": 6.9,\n        \"num_unique_values\": 43,\n        \"samples\": [\n          6.7,\n          3.8,\n          3.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal_width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7622376689603465,\n        \"min\": 0.1,\n        \"max\": 2.5,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          0.2,\n          1.2,\n          1.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"species\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"setosa\",\n          \"verginica\",\n          \"versicolor\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mg89nu1RDzXm","executionInfo":{"status":"ok","timestamp":1714359672460,"user_tz":-360,"elapsed":21,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"de8b5317-17ad-4290-b834-05a3b5fa0ac6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 150 entries, 0 to 149\n","Data columns (total 6 columns):\n"," #   Column        Non-Null Count  Dtype  \n","---  ------        --------------  -----  \n"," 0   Unnamed: 0    150 non-null    int64  \n"," 1   sepal_length  150 non-null    float64\n"," 2   sepal_width   150 non-null    float64\n"," 3   petal_length  150 non-null    float64\n"," 4   petal_width   150 non-null    float64\n"," 5   species       150 non-null    object \n","dtypes: float64(4), int64(1), object(1)\n","memory usage: 7.2+ KB\n"]}]},{"cell_type":"code","source":["df['species'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cLr1ZpNolAUE","executionInfo":{"status":"ok","timestamp":1714359672462,"user_tz":-360,"elapsed":20,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"aa39747e-c00f-49ec-ef2a-df450c7ada87"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["species\n","setosa        50\n","verginica     50\n","versicolor    50\n","Name: count, dtype: int64"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["# Drop unnecessary features\n","df.drop(['Unnamed: 0'], axis=1, inplace=True)\n","df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"5GuY4fbmD50i","executionInfo":{"status":"ok","timestamp":1714359672463,"user_tz":-360,"elapsed":18,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"b15ad6d3-0a7c-4fbd-f49e-6ca29c2c360b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     sepal_length  sepal_width  petal_length  petal_width     species\n","0             5.1          3.5           1.4          0.2      setosa\n","1             4.9          3.0           1.4          0.2      setosa\n","2             4.7          3.2           1.3          0.2      setosa\n","3             4.6          3.1           1.5          0.2      setosa\n","4             5.0          3.6           1.4          0.2      setosa\n","..            ...          ...           ...          ...         ...\n","145           6.7          3.0           5.2          2.3  versicolor\n","146           6.3          2.5           5.0          1.9  versicolor\n","147           6.5          3.0           5.2          2.0  versicolor\n","148           6.2          3.4           5.4          2.3  versicolor\n","149           5.9          3.0           5.1          1.8  versicolor\n","\n","[150 rows x 5 columns]"],"text/html":["\n","  <div id=\"df-2cb8c0a1-fa4d-4854-9cea-89294a37f0da\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sepal_length</th>\n","      <th>sepal_width</th>\n","      <th>petal_length</th>\n","      <th>petal_width</th>\n","      <th>species</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5.1</td>\n","      <td>3.5</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>setosa</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4.9</td>\n","      <td>3.0</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>setosa</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4.7</td>\n","      <td>3.2</td>\n","      <td>1.3</td>\n","      <td>0.2</td>\n","      <td>setosa</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4.6</td>\n","      <td>3.1</td>\n","      <td>1.5</td>\n","      <td>0.2</td>\n","      <td>setosa</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5.0</td>\n","      <td>3.6</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>setosa</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>145</th>\n","      <td>6.7</td>\n","      <td>3.0</td>\n","      <td>5.2</td>\n","      <td>2.3</td>\n","      <td>versicolor</td>\n","    </tr>\n","    <tr>\n","      <th>146</th>\n","      <td>6.3</td>\n","      <td>2.5</td>\n","      <td>5.0</td>\n","      <td>1.9</td>\n","      <td>versicolor</td>\n","    </tr>\n","    <tr>\n","      <th>147</th>\n","      <td>6.5</td>\n","      <td>3.0</td>\n","      <td>5.2</td>\n","      <td>2.0</td>\n","      <td>versicolor</td>\n","    </tr>\n","    <tr>\n","      <th>148</th>\n","      <td>6.2</td>\n","      <td>3.4</td>\n","      <td>5.4</td>\n","      <td>2.3</td>\n","      <td>versicolor</td>\n","    </tr>\n","    <tr>\n","      <th>149</th>\n","      <td>5.9</td>\n","      <td>3.0</td>\n","      <td>5.1</td>\n","      <td>1.8</td>\n","      <td>versicolor</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>150 rows Ã— 5 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2cb8c0a1-fa4d-4854-9cea-89294a37f0da')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2cb8c0a1-fa4d-4854-9cea-89294a37f0da button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2cb8c0a1-fa4d-4854-9cea-89294a37f0da');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-4c4aab1d-2510-49e6-8d15-ac23b7cf1302\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4c4aab1d-2510-49e6-8d15-ac23b7cf1302')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-4c4aab1d-2510-49e6-8d15-ac23b7cf1302 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_2f2c29db-ee56-4994-81c6-245cf3e1a867\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_2f2c29db-ee56-4994-81c6-245cf3e1a867 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 150,\n  \"fields\": [\n    {\n      \"column\": \"sepal_length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.828066127977863,\n        \"min\": 4.3,\n        \"max\": 7.9,\n        \"num_unique_values\": 35,\n        \"samples\": [\n          6.2,\n          4.5,\n          5.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sepal_width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4358662849366982,\n        \"min\": 2.0,\n        \"max\": 4.4,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          2.3,\n          4.0,\n          3.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal_length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7652982332594662,\n        \"min\": 1.0,\n        \"max\": 6.9,\n        \"num_unique_values\": 43,\n        \"samples\": [\n          6.7,\n          3.8,\n          3.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal_width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7622376689603465,\n        \"min\": 0.1,\n        \"max\": 2.5,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          0.2,\n          1.2,\n          1.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"species\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"setosa\",\n          \"verginica\",\n          \"versicolor\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["# Apply Label Encoder for species feature\n","from sklearn.preprocessing import LabelEncoder\n","le = LabelEncoder()"],"metadata":{"id":"v1fLeN0LKp-K"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Fit and Transform on Species\n","dataset = le.fit_transform(df['species'])"],"metadata":{"id":"fGJLOpCCQKxn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Convert array to Data Frame\n","species_le = pd.DataFrame(dataset, columns=['species'])"],"metadata":{"id":"QTtlmI3oQRys"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Drop None Encoded target Feature\n","df.drop(['species'], axis=1, inplace=True)"],"metadata":{"id":"5P1QqFmoQ5FA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Concate Encoded Feature with Original Data Frame\n","dset = pd.concat([df, species_le], axis=1)"],"metadata":{"id":"mCNHiSoBRALT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dset"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"ISHNn88ZU8Nz","executionInfo":{"status":"ok","timestamp":1714359672999,"user_tz":-360,"elapsed":27,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"cec8333d-dce9-4459-adcf-a1c4b4d872b8"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     sepal_length  sepal_width  petal_length  petal_width  species\n","0             5.1          3.5           1.4          0.2        0\n","1             4.9          3.0           1.4          0.2        0\n","2             4.7          3.2           1.3          0.2        0\n","3             4.6          3.1           1.5          0.2        0\n","4             5.0          3.6           1.4          0.2        0\n","..            ...          ...           ...          ...      ...\n","145           6.7          3.0           5.2          2.3        2\n","146           6.3          2.5           5.0          1.9        2\n","147           6.5          3.0           5.2          2.0        2\n","148           6.2          3.4           5.4          2.3        2\n","149           5.9          3.0           5.1          1.8        2\n","\n","[150 rows x 5 columns]"],"text/html":["\n","  <div id=\"df-75a76b2b-8dc5-48c7-b1a8-c79fa5388b14\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sepal_length</th>\n","      <th>sepal_width</th>\n","      <th>petal_length</th>\n","      <th>petal_width</th>\n","      <th>species</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5.1</td>\n","      <td>3.5</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4.9</td>\n","      <td>3.0</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4.7</td>\n","      <td>3.2</td>\n","      <td>1.3</td>\n","      <td>0.2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4.6</td>\n","      <td>3.1</td>\n","      <td>1.5</td>\n","      <td>0.2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5.0</td>\n","      <td>3.6</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>145</th>\n","      <td>6.7</td>\n","      <td>3.0</td>\n","      <td>5.2</td>\n","      <td>2.3</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>146</th>\n","      <td>6.3</td>\n","      <td>2.5</td>\n","      <td>5.0</td>\n","      <td>1.9</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>147</th>\n","      <td>6.5</td>\n","      <td>3.0</td>\n","      <td>5.2</td>\n","      <td>2.0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>148</th>\n","      <td>6.2</td>\n","      <td>3.4</td>\n","      <td>5.4</td>\n","      <td>2.3</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>149</th>\n","      <td>5.9</td>\n","      <td>3.0</td>\n","      <td>5.1</td>\n","      <td>1.8</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>150 rows Ã— 5 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-75a76b2b-8dc5-48c7-b1a8-c79fa5388b14')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-75a76b2b-8dc5-48c7-b1a8-c79fa5388b14 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-75a76b2b-8dc5-48c7-b1a8-c79fa5388b14');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-d0be1e5d-eb80-4457-8a79-8fba85785bd8\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d0be1e5d-eb80-4457-8a79-8fba85785bd8')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-d0be1e5d-eb80-4457-8a79-8fba85785bd8 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_19d46a35-b911-4c62-ac36-3a501ea2c1df\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('dset')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_19d46a35-b911-4c62-ac36-3a501ea2c1df button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('dset');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"dset","summary":"{\n  \"name\": \"dset\",\n  \"rows\": 150,\n  \"fields\": [\n    {\n      \"column\": \"sepal_length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.828066127977863,\n        \"min\": 4.3,\n        \"max\": 7.9,\n        \"num_unique_values\": 35,\n        \"samples\": [\n          6.2,\n          4.5,\n          5.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sepal_width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4358662849366982,\n        \"min\": 2.0,\n        \"max\": 4.4,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          2.3,\n          4.0,\n          3.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal_length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7652982332594662,\n        \"min\": 1.0,\n        \"max\": 6.9,\n        \"num_unique_values\": 43,\n        \"samples\": [\n          6.7,\n          3.8,\n          3.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal_width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7622376689603465,\n        \"min\": 0.1,\n        \"max\": 2.5,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          0.2,\n          1.2,\n          1.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"species\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["# Rename dset to df\n","df = dset"],"metadata":{"id":"r8gK1Ck8RMAq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"_vT8DsprVYVm","executionInfo":{"status":"ok","timestamp":1714359673000,"user_tz":-360,"elapsed":26,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"37124d77-7626-4406-a724-becf834b71c1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     sepal_length  sepal_width  petal_length  petal_width  species\n","0             5.1          3.5           1.4          0.2        0\n","1             4.9          3.0           1.4          0.2        0\n","2             4.7          3.2           1.3          0.2        0\n","3             4.6          3.1           1.5          0.2        0\n","4             5.0          3.6           1.4          0.2        0\n","..            ...          ...           ...          ...      ...\n","145           6.7          3.0           5.2          2.3        2\n","146           6.3          2.5           5.0          1.9        2\n","147           6.5          3.0           5.2          2.0        2\n","148           6.2          3.4           5.4          2.3        2\n","149           5.9          3.0           5.1          1.8        2\n","\n","[150 rows x 5 columns]"],"text/html":["\n","  <div id=\"df-500f939f-e70c-409a-9c6b-55d9736f2d47\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sepal_length</th>\n","      <th>sepal_width</th>\n","      <th>petal_length</th>\n","      <th>petal_width</th>\n","      <th>species</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5.1</td>\n","      <td>3.5</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4.9</td>\n","      <td>3.0</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4.7</td>\n","      <td>3.2</td>\n","      <td>1.3</td>\n","      <td>0.2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4.6</td>\n","      <td>3.1</td>\n","      <td>1.5</td>\n","      <td>0.2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5.0</td>\n","      <td>3.6</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>145</th>\n","      <td>6.7</td>\n","      <td>3.0</td>\n","      <td>5.2</td>\n","      <td>2.3</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>146</th>\n","      <td>6.3</td>\n","      <td>2.5</td>\n","      <td>5.0</td>\n","      <td>1.9</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>147</th>\n","      <td>6.5</td>\n","      <td>3.0</td>\n","      <td>5.2</td>\n","      <td>2.0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>148</th>\n","      <td>6.2</td>\n","      <td>3.4</td>\n","      <td>5.4</td>\n","      <td>2.3</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>149</th>\n","      <td>5.9</td>\n","      <td>3.0</td>\n","      <td>5.1</td>\n","      <td>1.8</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>150 rows Ã— 5 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-500f939f-e70c-409a-9c6b-55d9736f2d47')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-500f939f-e70c-409a-9c6b-55d9736f2d47 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-500f939f-e70c-409a-9c6b-55d9736f2d47');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-6565a351-97df-4289-b245-bb9c01799985\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6565a351-97df-4289-b245-bb9c01799985')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-6565a351-97df-4289-b245-bb9c01799985 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_31c4ec9b-b898-4973-8129-61f869564a85\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_31c4ec9b-b898-4973-8129-61f869564a85 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 150,\n  \"fields\": [\n    {\n      \"column\": \"sepal_length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.828066127977863,\n        \"min\": 4.3,\n        \"max\": 7.9,\n        \"num_unique_values\": 35,\n        \"samples\": [\n          6.2,\n          4.5,\n          5.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sepal_width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4358662849366982,\n        \"min\": 2.0,\n        \"max\": 4.4,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          2.3,\n          4.0,\n          3.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal_length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7652982332594662,\n        \"min\": 1.0,\n        \"max\": 6.9,\n        \"num_unique_values\": 43,\n        \"samples\": [\n          6.7,\n          3.8,\n          3.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal_width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7622376689603465,\n        \"min\": 0.1,\n        \"max\": 2.5,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          0.2,\n          1.2,\n          1.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"species\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["# Define input and output/target features\n","X = df.drop(['species'], axis=1)\n","y = df['species']"],"metadata":{"id":"rHcn8knOVZY-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Apply Scaler for input/independent features\n","from sklearn.preprocessing import StandardScaler\n","scale = StandardScaler()"],"metadata":{"id":"Lr_uLyvlZU61"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Scale input/independent features\n","X_scale = scale.fit_transform(X)\n","X_scale"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Hpffdxz7Zb5W","executionInfo":{"status":"ok","timestamp":1714359673001,"user_tz":-360,"elapsed":23,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"1e33a51e-38a3-4069-b78a-9b1c752ac23a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[-9.00681170e-01,  1.01900435e+00, -1.34022653e+00,\n","        -1.31544430e+00],\n","       [-1.14301691e+00, -1.31979479e-01, -1.34022653e+00,\n","        -1.31544430e+00],\n","       [-1.38535265e+00,  3.28414053e-01, -1.39706395e+00,\n","        -1.31544430e+00],\n","       [-1.50652052e+00,  9.82172869e-02, -1.28338910e+00,\n","        -1.31544430e+00],\n","       [-1.02184904e+00,  1.24920112e+00, -1.34022653e+00,\n","        -1.31544430e+00],\n","       [-5.37177559e-01,  1.93979142e+00, -1.16971425e+00,\n","        -1.05217993e+00],\n","       [-1.50652052e+00,  7.88807586e-01, -1.34022653e+00,\n","        -1.18381211e+00],\n","       [-1.02184904e+00,  7.88807586e-01, -1.28338910e+00,\n","        -1.31544430e+00],\n","       [-1.74885626e+00, -3.62176246e-01, -1.34022653e+00,\n","        -1.31544430e+00],\n","       [-1.14301691e+00,  9.82172869e-02, -1.28338910e+00,\n","        -1.44707648e+00],\n","       [-5.37177559e-01,  1.47939788e+00, -1.28338910e+00,\n","        -1.31544430e+00],\n","       [-1.26418478e+00,  7.88807586e-01, -1.22655167e+00,\n","        -1.31544430e+00],\n","       [-1.26418478e+00, -1.31979479e-01, -1.34022653e+00,\n","        -1.44707648e+00],\n","       [-1.87002413e+00, -1.31979479e-01, -1.51073881e+00,\n","        -1.44707648e+00],\n","       [-5.25060772e-02,  2.16998818e+00, -1.45390138e+00,\n","        -1.31544430e+00],\n","       [-1.73673948e-01,  3.09077525e+00, -1.28338910e+00,\n","        -1.05217993e+00],\n","       [-5.37177559e-01,  1.93979142e+00, -1.39706395e+00,\n","        -1.05217993e+00],\n","       [-9.00681170e-01,  1.01900435e+00, -1.34022653e+00,\n","        -1.18381211e+00],\n","       [-1.73673948e-01,  1.70959465e+00, -1.16971425e+00,\n","        -1.18381211e+00],\n","       [-9.00681170e-01,  1.70959465e+00, -1.28338910e+00,\n","        -1.18381211e+00],\n","       [-5.37177559e-01,  7.88807586e-01, -1.16971425e+00,\n","        -1.31544430e+00],\n","       [-9.00681170e-01,  1.47939788e+00, -1.28338910e+00,\n","        -1.05217993e+00],\n","       [-1.50652052e+00,  1.24920112e+00, -1.56757623e+00,\n","        -1.31544430e+00],\n","       [-9.00681170e-01,  5.58610819e-01, -1.16971425e+00,\n","        -9.20547742e-01],\n","       [-1.26418478e+00,  7.88807586e-01, -1.05603939e+00,\n","        -1.31544430e+00],\n","       [-1.02184904e+00, -1.31979479e-01, -1.22655167e+00,\n","        -1.31544430e+00],\n","       [-1.02184904e+00,  7.88807586e-01, -1.22655167e+00,\n","        -1.05217993e+00],\n","       [-7.79513300e-01,  1.01900435e+00, -1.28338910e+00,\n","        -1.31544430e+00],\n","       [-7.79513300e-01,  7.88807586e-01, -1.34022653e+00,\n","        -1.31544430e+00],\n","       [-1.38535265e+00,  3.28414053e-01, -1.22655167e+00,\n","        -1.31544430e+00],\n","       [-1.26418478e+00,  9.82172869e-02, -1.22655167e+00,\n","        -1.31544430e+00],\n","       [-5.37177559e-01,  7.88807586e-01, -1.28338910e+00,\n","        -1.05217993e+00],\n","       [-7.79513300e-01,  2.40018495e+00, -1.28338910e+00,\n","        -1.44707648e+00],\n","       [-4.16009689e-01,  2.63038172e+00, -1.34022653e+00,\n","        -1.31544430e+00],\n","       [-1.14301691e+00,  9.82172869e-02, -1.28338910e+00,\n","        -1.31544430e+00],\n","       [-1.02184904e+00,  3.28414053e-01, -1.45390138e+00,\n","        -1.31544430e+00],\n","       [-4.16009689e-01,  1.01900435e+00, -1.39706395e+00,\n","        -1.31544430e+00],\n","       [-1.14301691e+00,  1.24920112e+00, -1.34022653e+00,\n","        -1.44707648e+00],\n","       [-1.74885626e+00, -1.31979479e-01, -1.39706395e+00,\n","        -1.31544430e+00],\n","       [-9.00681170e-01,  7.88807586e-01, -1.28338910e+00,\n","        -1.31544430e+00],\n","       [-1.02184904e+00,  1.01900435e+00, -1.39706395e+00,\n","        -1.18381211e+00],\n","       [-1.62768839e+00, -1.74335684e+00, -1.39706395e+00,\n","        -1.18381211e+00],\n","       [-1.74885626e+00,  3.28414053e-01, -1.39706395e+00,\n","        -1.31544430e+00],\n","       [-1.02184904e+00,  1.01900435e+00, -1.22655167e+00,\n","        -7.88915558e-01],\n","       [-9.00681170e-01,  1.70959465e+00, -1.05603939e+00,\n","        -1.05217993e+00],\n","       [-1.26418478e+00, -1.31979479e-01, -1.34022653e+00,\n","        -1.18381211e+00],\n","       [-9.00681170e-01,  1.70959465e+00, -1.22655167e+00,\n","        -1.31544430e+00],\n","       [-1.50652052e+00,  3.28414053e-01, -1.34022653e+00,\n","        -1.31544430e+00],\n","       [-6.58345429e-01,  1.47939788e+00, -1.28338910e+00,\n","        -1.31544430e+00],\n","       [-1.02184904e+00,  5.58610819e-01, -1.34022653e+00,\n","        -1.31544430e+00],\n","       [ 1.40150837e+00,  3.28414053e-01,  5.35408562e-01,\n","         2.64141916e-01],\n","       [ 6.74501145e-01,  3.28414053e-01,  4.21733708e-01,\n","         3.95774101e-01],\n","       [ 1.28034050e+00,  9.82172869e-02,  6.49083415e-01,\n","         3.95774101e-01],\n","       [-4.16009689e-01, -1.74335684e+00,  1.37546573e-01,\n","         1.32509732e-01],\n","       [ 7.95669016e-01, -5.92373012e-01,  4.78571135e-01,\n","         3.95774101e-01],\n","       [-1.73673948e-01, -5.92373012e-01,  4.21733708e-01,\n","         1.32509732e-01],\n","       [ 5.53333275e-01,  5.58610819e-01,  5.35408562e-01,\n","         5.27406285e-01],\n","       [-1.14301691e+00, -1.51316008e+00, -2.60315415e-01,\n","        -2.62386821e-01],\n","       [ 9.16836886e-01, -3.62176246e-01,  4.78571135e-01,\n","         1.32509732e-01],\n","       [-7.79513300e-01, -8.22569778e-01,  8.07091462e-02,\n","         2.64141916e-01],\n","       [-1.02184904e+00, -2.43394714e+00, -1.46640561e-01,\n","        -2.62386821e-01],\n","       [ 6.86617933e-02, -1.31979479e-01,  2.51221427e-01,\n","         3.95774101e-01],\n","       [ 1.89829664e-01, -1.97355361e+00,  1.37546573e-01,\n","        -2.62386821e-01],\n","       [ 3.10997534e-01, -3.62176246e-01,  5.35408562e-01,\n","         2.64141916e-01],\n","       [-2.94841818e-01, -3.62176246e-01, -8.98031345e-02,\n","         1.32509732e-01],\n","       [ 1.03800476e+00,  9.82172869e-02,  3.64896281e-01,\n","         2.64141916e-01],\n","       [-2.94841818e-01, -1.31979479e-01,  4.21733708e-01,\n","         3.95774101e-01],\n","       [-5.25060772e-02, -8.22569778e-01,  1.94384000e-01,\n","        -2.62386821e-01],\n","       [ 4.32165405e-01, -1.97355361e+00,  4.21733708e-01,\n","         3.95774101e-01],\n","       [-2.94841818e-01, -1.28296331e+00,  8.07091462e-02,\n","        -1.30754636e-01],\n","       [ 6.86617933e-02,  3.28414053e-01,  5.92245988e-01,\n","         7.90670654e-01],\n","       [ 3.10997534e-01, -5.92373012e-01,  1.37546573e-01,\n","         1.32509732e-01],\n","       [ 5.53333275e-01, -1.28296331e+00,  6.49083415e-01,\n","         3.95774101e-01],\n","       [ 3.10997534e-01, -5.92373012e-01,  5.35408562e-01,\n","         8.77547895e-04],\n","       [ 6.74501145e-01, -3.62176246e-01,  3.08058854e-01,\n","         1.32509732e-01],\n","       [ 9.16836886e-01, -1.31979479e-01,  3.64896281e-01,\n","         2.64141916e-01],\n","       [ 1.15917263e+00, -5.92373012e-01,  5.92245988e-01,\n","         2.64141916e-01],\n","       [ 1.03800476e+00, -1.31979479e-01,  7.05920842e-01,\n","         6.59038469e-01],\n","       [ 1.89829664e-01, -3.62176246e-01,  4.21733708e-01,\n","         3.95774101e-01],\n","       [-1.73673948e-01, -1.05276654e+00, -1.46640561e-01,\n","        -2.62386821e-01],\n","       [-4.16009689e-01, -1.51316008e+00,  2.38717193e-02,\n","        -1.30754636e-01],\n","       [-4.16009689e-01, -1.51316008e+00, -3.29657076e-02,\n","        -2.62386821e-01],\n","       [-5.25060772e-02, -8.22569778e-01,  8.07091462e-02,\n","         8.77547895e-04],\n","       [ 1.89829664e-01, -8.22569778e-01,  7.62758269e-01,\n","         5.27406285e-01],\n","       [-5.37177559e-01, -1.31979479e-01,  4.21733708e-01,\n","         3.95774101e-01],\n","       [ 1.89829664e-01,  7.88807586e-01,  4.21733708e-01,\n","         5.27406285e-01],\n","       [ 1.03800476e+00,  9.82172869e-02,  5.35408562e-01,\n","         3.95774101e-01],\n","       [ 5.53333275e-01, -1.74335684e+00,  3.64896281e-01,\n","         1.32509732e-01],\n","       [-2.94841818e-01, -1.31979479e-01,  1.94384000e-01,\n","         1.32509732e-01],\n","       [-4.16009689e-01, -1.28296331e+00,  1.37546573e-01,\n","         1.32509732e-01],\n","       [-4.16009689e-01, -1.05276654e+00,  3.64896281e-01,\n","         8.77547895e-04],\n","       [ 3.10997534e-01, -1.31979479e-01,  4.78571135e-01,\n","         2.64141916e-01],\n","       [-5.25060772e-02, -1.05276654e+00,  1.37546573e-01,\n","         8.77547895e-04],\n","       [-1.02184904e+00, -1.74335684e+00, -2.60315415e-01,\n","        -2.62386821e-01],\n","       [-2.94841818e-01, -8.22569778e-01,  2.51221427e-01,\n","         1.32509732e-01],\n","       [-1.73673948e-01, -1.31979479e-01,  2.51221427e-01,\n","         8.77547895e-04],\n","       [-1.73673948e-01, -3.62176246e-01,  2.51221427e-01,\n","         1.32509732e-01],\n","       [ 4.32165405e-01, -3.62176246e-01,  3.08058854e-01,\n","         1.32509732e-01],\n","       [-9.00681170e-01, -1.28296331e+00, -4.30827696e-01,\n","        -1.30754636e-01],\n","       [-1.73673948e-01, -5.92373012e-01,  1.94384000e-01,\n","         1.32509732e-01],\n","       [ 5.53333275e-01,  5.58610819e-01,  1.27429511e+00,\n","         1.71209594e+00],\n","       [-5.25060772e-02, -8.22569778e-01,  7.62758269e-01,\n","         9.22302838e-01],\n","       [ 1.52267624e+00, -1.31979479e-01,  1.21745768e+00,\n","         1.18556721e+00],\n","       [ 5.53333275e-01, -3.62176246e-01,  1.04694540e+00,\n","         7.90670654e-01],\n","       [ 7.95669016e-01, -1.31979479e-01,  1.16062026e+00,\n","         1.31719939e+00],\n","       [ 2.12851559e+00, -1.31979479e-01,  1.61531967e+00,\n","         1.18556721e+00],\n","       [-1.14301691e+00, -1.28296331e+00,  4.21733708e-01,\n","         6.59038469e-01],\n","       [ 1.76501198e+00, -3.62176246e-01,  1.44480739e+00,\n","         7.90670654e-01],\n","       [ 1.03800476e+00, -1.28296331e+00,  1.16062026e+00,\n","         7.90670654e-01],\n","       [ 1.64384411e+00,  1.24920112e+00,  1.33113254e+00,\n","         1.71209594e+00],\n","       [ 7.95669016e-01,  3.28414053e-01,  7.62758269e-01,\n","         1.05393502e+00],\n","       [ 6.74501145e-01, -8.22569778e-01,  8.76433123e-01,\n","         9.22302838e-01],\n","       [ 1.15917263e+00, -1.31979479e-01,  9.90107977e-01,\n","         1.18556721e+00],\n","       [-1.73673948e-01, -1.28296331e+00,  7.05920842e-01,\n","         1.05393502e+00],\n","       [-5.25060772e-02, -5.92373012e-01,  7.62758269e-01,\n","         1.58046376e+00],\n","       [ 6.74501145e-01,  3.28414053e-01,  8.76433123e-01,\n","         1.44883158e+00],\n","       [ 7.95669016e-01, -1.31979479e-01,  9.90107977e-01,\n","         7.90670654e-01],\n","       [ 2.24968346e+00,  1.70959465e+00,  1.67215710e+00,\n","         1.31719939e+00],\n","       [ 2.24968346e+00, -1.05276654e+00,  1.78583195e+00,\n","         1.44883158e+00],\n","       [ 1.89829664e-01, -1.97355361e+00,  7.05920842e-01,\n","         3.95774101e-01],\n","       [ 1.28034050e+00,  3.28414053e-01,  1.10378283e+00,\n","         1.44883158e+00],\n","       [-2.94841818e-01, -5.92373012e-01,  6.49083415e-01,\n","         1.05393502e+00],\n","       [ 2.24968346e+00, -5.92373012e-01,  1.67215710e+00,\n","         1.05393502e+00],\n","       [ 5.53333275e-01, -8.22569778e-01,  6.49083415e-01,\n","         7.90670654e-01],\n","       [ 1.03800476e+00,  5.58610819e-01,  1.10378283e+00,\n","         1.18556721e+00],\n","       [ 1.64384411e+00,  3.28414053e-01,  1.27429511e+00,\n","         7.90670654e-01],\n","       [ 4.32165405e-01, -5.92373012e-01,  5.92245988e-01,\n","         7.90670654e-01],\n","       [ 3.10997534e-01, -1.31979479e-01,  6.49083415e-01,\n","         7.90670654e-01],\n","       [ 6.74501145e-01, -5.92373012e-01,  1.04694540e+00,\n","         1.18556721e+00],\n","       [ 1.64384411e+00, -1.31979479e-01,  1.16062026e+00,\n","         5.27406285e-01],\n","       [ 1.88617985e+00, -5.92373012e-01,  1.33113254e+00,\n","         9.22302838e-01],\n","       [ 2.49201920e+00,  1.70959465e+00,  1.50164482e+00,\n","         1.05393502e+00],\n","       [ 6.74501145e-01, -5.92373012e-01,  1.04694540e+00,\n","         1.31719939e+00],\n","       [ 5.53333275e-01, -5.92373012e-01,  7.62758269e-01,\n","         3.95774101e-01],\n","       [ 3.10997534e-01, -1.05276654e+00,  1.04694540e+00,\n","         2.64141916e-01],\n","       [ 2.24968346e+00, -1.31979479e-01,  1.33113254e+00,\n","         1.44883158e+00],\n","       [ 5.53333275e-01,  7.88807586e-01,  1.04694540e+00,\n","         1.58046376e+00],\n","       [ 6.74501145e-01,  9.82172869e-02,  9.90107977e-01,\n","         7.90670654e-01],\n","       [ 1.89829664e-01, -1.31979479e-01,  5.92245988e-01,\n","         7.90670654e-01],\n","       [ 1.28034050e+00,  9.82172869e-02,  9.33270550e-01,\n","         1.18556721e+00],\n","       [ 1.03800476e+00,  9.82172869e-02,  1.04694540e+00,\n","         1.58046376e+00],\n","       [ 1.28034050e+00,  9.82172869e-02,  7.62758269e-01,\n","         1.44883158e+00],\n","       [-5.25060772e-02, -8.22569778e-01,  7.62758269e-01,\n","         9.22302838e-01],\n","       [ 1.15917263e+00,  3.28414053e-01,  1.21745768e+00,\n","         1.44883158e+00],\n","       [ 1.03800476e+00,  5.58610819e-01,  1.10378283e+00,\n","         1.71209594e+00],\n","       [ 1.03800476e+00, -1.31979479e-01,  8.19595696e-01,\n","         1.44883158e+00],\n","       [ 5.53333275e-01, -1.28296331e+00,  7.05920842e-01,\n","         9.22302838e-01],\n","       [ 7.95669016e-01, -1.31979479e-01,  8.19595696e-01,\n","         1.05393502e+00],\n","       [ 4.32165405e-01,  7.88807586e-01,  9.33270550e-01,\n","         1.44883158e+00],\n","       [ 6.86617933e-02, -1.31979479e-01,  7.62758269e-01,\n","         7.90670654e-01]])"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["# Imbalance Target Feature\n","X = X_scale[:110]\n","y = y[:110]"],"metadata":{"id":"AqHv16hRV3RU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Apply SMOTE on X and y\n","from imblearn.over_sampling import SMOTE\n","smote = SMOTE()\n","X_resampled, y_resampled = smote.fit_resample(X, y)"],"metadata":{"id":"wySTUtS1WAfy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["list(y_resampled).count(0),list(y_resampled).count(1),list(y_resampled).count(2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"O-bRon8pzzaU","executionInfo":{"status":"ok","timestamp":1714359673474,"user_tz":-360,"elapsed":11,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"31067668-4d25-4d6d-a607-7ff3ceb0849c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(50, 50, 50)"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["# Apply PCA for column reduction\n","from sklearn.decomposition import PCA\n","pca = PCA(n_components=2)\n","X_pca = pca.fit_transform(X)\n","X_resampled_pca = pca.transform(X_resampled)"],"metadata":{"id":"Z_e77i5HW9ri"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Apply Scatter plot for visualize data\n","plt.figure(figsize=(12, 6))\n","\n","# Plot original dataset\n","plt.subplot(1, 2, 1)\n","for i in range(3):\n","    plt.scatter(X_pca[y == i, 0], X_pca[y == i, 1], label=f'Class {i}')\n","plt.title('Original Iris Dataset')\n","plt.xlabel('Principal Component 1')\n","plt.ylabel('Principal Component 2')\n","plt.legend()\n","\n","# Plot balanced dataset after SMOTE\n","plt.subplot(1, 2, 2)\n","for i in range(3):\n","    plt.scatter(X_resampled_pca[y_resampled == i, 0], X_resampled_pca[y_resampled == i, 1], label=f'Class {i}')\n","plt.title('Balanced Iris Dataset after SMOTE')\n","plt.xlabel('Principal Component 1')\n","plt.ylabel('Principal Component 2')\n","plt.legend()\n","\n","plt.tight_layout()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":607},"id":"EPMdYIbaXFme","executionInfo":{"status":"ok","timestamp":1714359674930,"user_tz":-360,"elapsed":1462,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"4c700c51-569f-4794-d165-7042314dd65f"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 2 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAABKUAAAJOCAYAAABm7rQwAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAADBEElEQVR4nOzdeXhU5d3/8c/MCIQACVs2EAOiFmOsNkpU3EBjoSC4W1fEVlvRusX6S+zzKEZbTepT1KrFalVUWuvaCq3Gmgp1rcFOrWLcjbFiwkSiCRgDOnN+fwwTM5mZ5JzJmf39ui4u5Mw9M3fCMh/v+3u+t8MwDEMAAAAAAABAHDkTPQEAAAAAAABkHhalAAAAAAAAEHcsSgEAAAAAACDuWJQCAAAAAABA3LEoBQAAAAAAgLhjUQoAAAAAAABxx6IUAAAAAAAA4o5FKQAAAAAAAMQdi1IAAAAAAACIOxalAIS4+uqr5XA4onruypUr5XA49OGHH9o7qT4+/PBDORwOrVy50tbXHcrXDQAAwps6daqWLFmS6GkMWawyzuzZszV79mxbXxPRu//++zVjxgwNGzZMY8eOTfR0gLTHohSQRt544w2dccYZmjx5skaMGKFJkybp9NNP1xtvvJHoqSXEunXr5HA49Mgjj8T9vadOnSqHwyGHwyGn06mxY8dq77331o9+9CO9/PLLQ3rt6667Tn/+85/tmegQNTU16eqrr47pIiQAID4Ciy59f+Tn52vOnDl68sknEz29lBHY5Pr000/j+r6BTbvAj2HDhmnixImaNWuWfvazn+mjjz6K+rU/+eQTXX311Xr11Vftm/AQPPHEE7r66qttf9233npLS5Ys0fTp03XnnXfqjjvuUHd3t66++mqtW7fO9vcbSHt7uy6++GLNmDFDI0eOVH5+vsrLy1VVVaWtW7f2jluyZIkcDodycnL05ZdfhrzOu+++2/tn4v/+7/9CHv/oo4903nnnaerUqRoxYoTy8/N17LHH6oUXXgga1zfbDvQjsGk80JjzzjvP3m8WUtpOiZ4AAHs89thjOvXUUzV+/Hj98Ic/1LRp0/Thhx/qrrvu0iOPPKI//vGPOu6440y91v/+7/+quro6qnmceeaZOuWUUzRixIionp9IQ/m6w9l333112WWXSZK2bNmiN998Uw8//LDuvPNOXXrppVq+fHlUr3vdddfpxBNP1LHHHmvbXKPV1NSkmpoazZ49W1OnTk30dAAANrjmmms0bdo0GYahTZs2aeXKlZo/f77WrFmjo48+OtHTSzt/+9vfbH29U089VfPnz5fP59Nnn32m9evX66abbtLNN9+su+66S6eccorl1/zkk09UU1OjqVOnat9997V1vtF44okndNttt9m+MLVu3Tr5fD7dfPPN2m233SRJn376qWpqaiQpbhVtHR0d2n///dXV1aUf/OAHmjFjhjZv3qzXXntNK1as0NKlSzV69Oje8TvttJO6u7u1Zs0anXzyyUGv9fvf/15ZWVnq6ekJeZ8XXnhB8+fPlySdc845KikpUVtbm1auXKlDDz1UN998sy688EJJ0k033RS0GPbEE0/ogQce0I033qiJEyf2Xp81a1bvfx911FFavHhxyPvuscceUX5nkI5YlALSwPvvv68zzzxTu+66q5599lnl5eX1PnbxxRfr0EMP1ZlnnqnXXntNu+66a8TX+eKLLzRq1CjttNNO2mmn6P55cLlccrlcUT03Uez4usOZPHmyzjjjjKBrdXV1Ou2003TjjTdq991319KlS217PwAA7PC9731P+++/f++vf/jDH6qgoEAPPPAAi1I26u7uVnZ2toYPH27r65aVlYXkj5aWFn33u9/VWWedpT333FP77LOPre+ZLjwejyTF5ba9QP4M56677tJHH32kF154IWiRR5K6urpC/syMGDFCBx98sB544IGQRak//OEPWrBggR599NGg65999plOPPFEjRw5Ui+88IKmT5/e+1hlZaXmzp2rSy65RPvtt59mzZoVshna1tamBx54QMcee2zEjck99tgj5M8i0B+37wFp4IYbblB3d7fuuOOOoAUpSZo4caJ++9vf6osvvtAvf/nL3uuB0vKmpiaddtppGjdunA455JCgx/r68ssvddFFF2nixIkaM2aMFi1apI0bN8rhcATtUoXrtzB16lQdffTRev7551VeXq6srCztuuuuuu+++4Leo6OjQz/96U+19957a/To0crJydH3vvc9/ec//7HpO2X963766ad1yCGHaOzYsRo9erS+9a1v6Wc/+1nU7z9y5Ejdf//9Gj9+vH7xi1/IMIzex/7v//5Ps2bN0oQJEzRy5Ejtt99+IbceOhwOffHFF7r33nt7S6ADfTpaWlp0/vnn61vf+pZGjhypCRMm6KSTTgq5te6rr75STU2Ndt99d2VlZWnChAk65JBD9PTTTweNe+utt3TiiSdq/PjxysrK0v7776/Vq1f3Pr5y5UqddNJJkqQ5c+b0zife5e0AgNgaO3asRo4cGbJxY+ZzKxyzn/eB2/Afeugh/eIXv9DOO++srKwsHXnkkXrvvfdCXvfll1/W/PnzNW7cOI0aNUrf/va3dfPNNweNGeyzLeCNN97QEUccoZEjR2rnnXfWz3/+c/l8PjPfrrBmz56t0tJS/etf/9Jhhx2m7Ozs3jwRrqfULbfcor322kvZ2dkaN26c9t9/f/3hD3+I+v2Li4u1cuVKbd++PSgPmvm9WLdunWbOnClJOvvss0Nu03ruued00kknaZdddtGIESM0ZcoUXXrppSG3krW1tenss8/WzjvvrBEjRqioqEjHHHNMSE558skndeihh2rUqFEaM2aMFixYENSKYsmSJbrtttskBd8iNpDHH39cCxYs0KRJkzRixAhNnz5d1157rbxeb++YqVOnatmyZZKkvLy83owVyNY1NTW979U3+5r5MxXIx//4xz90/vnnKz8/XzvvvHPE+b7//vtyuVw68MADQx7LyclRVlZWyPXTTjtNTz75pD7//PPea+vXr9e7776r0047LWT8b3/7W7W1temGG24IWpCS/Hk1kDWvueaaiPME7EClFJAG1qxZo6lTp+rQQw8N+/hhhx2mqVOn6q9//WvIYyeddJJ23313XXfddUELJP0tWbJEDz30kM4880wdeOCB+sc//qEFCxaYnuN7772nE088UT/84Q911lln6e6779aSJUu03377aa+99pIkffDBB/rzn/+sk046SdOmTdOmTZv029/+Vocffriampo0adIk0+83GDNf9xtvvKGjjz5a3/72t3XNNddoxIgReu+990Lusbdq9OjROu6443TXXXepqamp9+u/+eabtWjRIp1++unavn27/vjHP+qkk07SX/7yl97v9f33369zzjlH5eXl+tGPfiRJvUFi/fr1evHFF3XKKado55131ocffqgVK1Zo9uzZampqUnZ2tiT/4tv111/f+zpdXV165ZVX5Ha7ddRRR/V+7QcffLAmT56s6upqjRo1Sg899JCOPfZYPfroozruuON02GGH6aKLLtKvf/1r/exnP9Oee+4pSb0/AwBSU2dnpz799FMZhiGPx6NbbrlFW7duDal4MPO5FY7Vz/va2lo5nU799Kc/VWdnp375y1/q9NNPD+rR+PTTT+voo49WUVGRLr74YhUWFurNN9/UX/7yF1188cWSzH22Sf7Fkzlz5ujrr7/uHXfHHXdo5MiRQ/q+bt68Wd/73vd0yimn6IwzzlBBQUHYcXfeeacuuuginXjiibr44ovV09Oj1157TS+//HLYxQWzDjroIE2fPj1oE8rM78Wee+6pa665RldddZV+9KMf9ebNQAXPww8/rO7ubi1dulQTJkxQY2OjbrnlFn388cd6+OGHe9/rhBNO0BtvvKELL7xQU6dOlcfj0dNPP62PPvqot9Lm/vvv11lnnaW5c+eqrq5O3d3dWrFihQ455BD9+9//1tSpU/XjH/9Yn3zyiZ5++mndf//9pr72lStXavTo0aqsrNTo0aP1zDPP6KqrrlJXV5duuOEGSf7b0+677z796U9/0ooVKzR69GjtvffeOvDAA7V06VIdd9xxOv744yVJ3/72tyWZ/zMVcP755ysvL09XXXWVvvjii4jzLS4ultfr7f1+mHH88cfrvPPO02OPPaYf/OAHkvxVUjNmzFBZWVnI+DVr1igrKyuksipg2rRpOuSQQ/TMM8/oyy+/jOrPf09PT9jeajk5ObZXCCKFGQBS2ueff25IMo455pgBxy1atMiQZHR1dRmGYRjLli0zJBmnnnpqyNjAYwH/+te/DEnGJZdcEjRuyZIlhiRj2bJlvdfuueceQ5LR3Nzce624uNiQZDz77LO91zwejzFixAjjsssu673W09NjeL3eoPdobm42RowYYVxzzTVB1yQZ99xzz4Bf89q1aw1JxsMPPxzytZn5um+88UZDktHe3j7g+4RTXFxsLFiwIOLjgdd+/PHHe691d3cHjdm+fbtRWlpqHHHEEUHXR40aZZx11lkhr9n/+YZhGC+99JIhybjvvvt6r+2zzz4Dzs0wDOPII4809t57b6Onp6f3ms/nM2bNmmXsvvvuvdcefvhhQ5Kxdu3aAV8PAJD8Ap/h/X+MGDHCWLlyZch4s59bxcXFQZ9bZj/vA5/je+65p7Ft27be6zfffLMhyXj99dcNwzCMr7/+2pg2bZpRXFxsfPbZZ0Gv6/P5ev/b7GfbJZdcYkgyXn755d5rHo/HyM3NDck44QTyRN/8cPjhhxuSjNtvvz1k/OGHH24cfvjhvb8+5phjjL322mvA9wgnkI9uuOGGiGOOOeYYQ5LR2dlpGIb534v169dHzF7h8sf1119vOBwOo6WlxTAMw/jss88GnduWLVuMsWPHGueee27Q9ba2NiM3Nzfo+gUXXGBY+V/ZcHP88Y9/bGRnZwf9eQj3e9fe3h6SdwPM/pkK/N065JBDjK+//nrQ+ba1tRl5eXmGJGPGjBnGeeedZ/zhD38wPv/885CxZ511ljFq1CjDMAzjxBNPNI488kjDMAzD6/UahYWFRk1NTdg/G2PHjjX22WefAedx0UUXGZKM1157LeSxG264YcC/D+H+LQn8eOCBBwb9HiBzcPsekOK2bNkiSRozZsyA4wKPd3V1BV03c/pFfX29JP/uTl+BxodmlJSUBFVy5eXl6Vvf+pY++OCD3msjRoyQ0+n/Z8nr9Wrz5s29t8y53W7T72WGma870E/g8ccfH1LJfjiB5pSB3z9JQTtQn332mTo7O3XooYea/tr7Pv+rr77S5s2btdtuu2ns2LFBrzF27Fi98cYbevfdd8O+TkdHh5555hmdfPLJ2rJliz799FN9+umn2rx5s+bOnat3331XGzdutPT1AgBSx2233aann35aTz/9tFatWqU5c+bonHPO0WOPPRY0LtrPLauf92effXZQVUUgTwQyxL///W81NzfrkksuCekFFLity8pn2xNPPKEDDzxQ5eXlva+Tl5en008/fcCvazAjRozQ2WefPei4sWPH6uOPP9b69euH9H7h9M8fdmSvvn8OvvjiC3366aeaNWuWDMPQv//9794xw4cP17p16/TZZ5+FfZ2nn35an3/+uU499dTe359PP/1ULpdLBxxwgNauXRv11913joHf/0MPPVTd3d166623onrNaPLSueeea6r3akFBgf7zn//ovPPO02effabbb79dp512mvLz83XttddGrPI/7bTTtG7dOrW1temZZ55RW1tbxOq6LVu2RP3/D2Ydc8wxvf+W9P0xZ86cqF4P6Ynb94AUF/iw6Lu4EU6kxatp06YN+h4tLS1yOp0hYwOnkpixyy67hFwbN25cUDAJnHbym9/8Rs3NzUH3+U+YMMH0e5lh5uv+/ve/r9/97nc655xzVF1drSOPPFLHH3+8TjzxxN4AF63A6SV9fz/+8pe/6Oc//7leffVVbdu2rff6YH0SAr788ktdf/31uueee7Rx48agwNLZ2dn739dcc42OOeYY7bHHHiotLdW8efN05pln9paiv/feezIMQ1deeaWuvPLKsO/l8Xg0efJk818wACBllJeXBzU6P/XUU/Wd73xHP/nJT3T00Uf3LhBF+7ll9fO+f4YYN26cJPVmiPfff1+SVFpaGvE9rXy2tbS06IADDgh5/Fvf+taAX9dgJk+ebOqWpaqqKjU0NKi8vFy77babvvvd7+q0007TwQcfPKT3l0Lzhx3Z66OPPtJVV12l1atXhyw4BfLHiBEjVFdXp8suu0wFBQU68MADdfTRR2vx4sUqLCyUpN7NsiOOOCLs++Tk5Fj4SoO98cYb+t///V8988wzIQssfTOSFdHkJTP5M6CoqEgrVqzQb37zG7377rt66qmnVFdXp6uuukpFRUU655xzQp4zf/58jRkzRg8++KBeffVVzZw5U7vttltI3y7J/2cg2v9/MGvnnXdWRUVFVM9F5mBRCkhxubm5Kioq0muvvTbguNdee02TJ08O+UAfan8EsyLtCvVdOLnuuut05ZVX6gc/+IGuvfZajR8/Xk6nU5dccontlUpmvu6RI0fq2Wef1dq1a/XXv/5V9fX1evDBB3XEEUfob3/725BOGdywYYOkbxb2nnvuOS1atEiHHXaYfvOb36ioqEjDhg3TPffcY7qx6YUXXqh77rlHl1xyiQ466CDl5ubK4XDolFNOCfr+HXbYYXr//ff1+OOP629/+5t+97vf6cYbb9Ttt9+uc845p3fsT3/6U82dOzfse1lZkAQApDan06k5c+bo5ptv1rvvvqu99tprSJ9bVj/vzWSIwSTDZ5vZzLXnnnvq7bff1l/+8hfV19fr0Ucf1W9+8xtdddVVqqmpGdIcNmzYoPz8/N48ONTs5fV6ddRRR6mjo0NVVVWaMWOGRo0apY0bN2rJkiVBr3HJJZdo4cKF+vOf/6ynnnpKV155pa6//no988wz+s53vtM79v777+9dqOor2hOSP//8cx1++OHKycnRNddco+nTpysrK0tut1tVVVVRZ8xo/kxFk7sdDof22GMP7bHHHlqwYIF23313/f73vw+7KDVixAgdf/zxuvfee/XBBx8ENWTvb88999S///1vbdu2TSNGjAg75rXXXtOwYcO0++67W543YBaLUkAaOProo3XnnXfq+eef7z1Jrq/nnntOH374oX784x9H9frFxcXy+Xxqbm4O+lAKd/LNUDzyyCOaM2eO7rrrrqDrn3/+uSZOnGjre5nldDp15JFH6sgjj9Ty5ct13XXX6X/+53+0du3aqHd+tm7dqj/96U+aMmVKb1PwRx99VFlZWXrqqaeCgsE999wT8vxIO9CPPPKIzjrrLP3qV7/qvdbT0xN0CkvA+PHjdfbZZ+vss8/W1q1bddhhh+nqq6/WOeeco1133VWSNGzYsEG/RrNVXACA1Pb1119L+qbSxsrnVn92f94HDvzYsGFDxM8tK59txcXFYW9xf/vtty3PLVqjRo3S97//fX3/+9/X9u3bdfzxx+sXv/iFrrjiirAnr5nx0ksv6f333w9qWG/29yLS5/3rr7+ud955R/fee68WL17ce73/ib4B06dP12WXXabLLrtM7777rvbdd1/96le/0qpVq3p/H/Pz823NH+vWrdPmzZv12GOP6bDDDuu93tzcbOr5kd7Lyp8pu+y6664aN26cWltbI4457bTTdPfdd8vpdOqUU06JOO7oo4/WSy+9pIcffjjkEANJ+vDDD/Xcc8+poqIibpvYyEz0lALSwOWXX66RI0fqxz/+sTZv3hz0WEdHh8477zxlZ2fr8ssvj+r1A7s/v/nNb4Ku33LLLdFNOAKXyxWy6/nwww8nrH9RR0dHyLV9991XkoJuU7Diyy+/1JlnnqmOjg79z//8T2/QcblccjgcQWXzH374of785z+HvMaoUaPCLjSF+/7dcsstQa8pKeTPyOjRo7Xbbrv1fk35+fmaPXu2fvvb34YNPe3t7UFzkRR2PgCA9PDVV1/pb3/7m4YPH967mWLlc6s/uz/vy8rKNG3aNN10000hn0eB97Hy2TZ//nz985//VGNjY9Djv//976Oan1X9P6eHDx+ukpISGYahr776KqrXbGlp0ZIlSzR8+PCgPGj29yLS532giq3vaxiGoZtvvjloXHd3t3p6eoKuTZ8+XWPGjOnNH3PnzlVOTo6uu+66sF9ntPkj3By3b98ekmsjCZxe3P+9rPyZsurll18OezpfY2OjNm/ePOCtpHPmzNG1116rW2+9NWzFWcCPf/xj5efn6/LLLw/q8Sr5NzXPPvtsGYahq666KuqvAzCDSikgDey+++669957dfrpp2vvvffWD3/4Q02bNk0ffvih7rrrLn366ad64IEHenegrNpvv/10wgkn6KabbtLmzZt14IEH6h//+IfeeecdSfZVyxx99NG65pprdPbZZ2vWrFl6/fXX9fvf/753JyrerrnmGj377LNasGCBiouL5fF49Jvf/EY777xz2Iq0/jZu3KhVq1ZJ8u8sNzU16eGHH1ZbW5suu+yyoMq1BQsWaPny5Zo3b55OO+00eTwe3Xbbbdptt91Cbs3cb7/91NDQoOXLl2vSpEmaNm2aDjjgAB199NG6//77lZubq5KSEr300ktqaGgI6QlRUlKi2bNna7/99tP48eP1yiuv6JFHHtFPfvKT3jG33XabDjnkEO29994699xzteuuu2rTpk166aWX9PHHH+s///mPJP8incvlUl1dnTo7OzVixAgdccQRys/Pj/r7DgBIrCeffLK3+bPH49Ef/vAHvfvuu6quru697cvK51Z/dn/eO51OrVixQgsXLtS+++6rs88+W0VFRXrrrbf0xhtv6KmnnpJk/rPt//2//6f7779f8+bN08UXX6xRo0bpjjvuUHFx8aBfmx2++93vqrCwUAcffLAKCgr05ptv6tZbb9WCBQtM9fZxu91atWqVfD6fPv/8c61fv16PPvqoHA6H7r///t4ekpL534vp06dr7Nixuv322zVmzBiNGjVKBxxwgGbMmKHp06frpz/9qTZu3KicnBw9+uijIb2l3nnnHR155JE6+eSTVVJSop122kl/+tOftGnTpt5qnpycHK1YsUJnnnmmysrKdMoppygvL08fffSR/vrXv+rggw/WrbfeKsmfhSTpoosu0ty5c+VyuSJWBc2aNUvjxo3TWWedpYsuuqj3+2D29s+RI0eqpKREDz74oPbYYw+NHz9epaWlKi0tNf1nyqr7779fv//973Xcccdpv/320/Dhw/Xmm2/q7rvvVlZWln72s59FfK7T6dT//u//DvoeEyZM0COPPKIFCxaorKxM55xzjkpKStTW1qaVK1fqvffe080336xZs2ZF9TVI/t/3QBbuq6CgQEcddVTUr4s0E+fT/gDE0GuvvWaceuqpRlFRkTFs2DCjsLDQOPXUU3uPTO4r3JG3/R/r64svvjAuuOACY/z48cbo0aONY4891nj77bcNSUZtbW3vuMCRt32Phy0uLjYWLFgQ8j79j0Du6ekxLrvsMqOoqMgYOXKkcfDBBxsvvfRSyLjAsbbhjiXu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\n"},"metadata":{}}]},{"cell_type":"code","source":["list(X_resampled).count(1), list(y).count(1), list(y_resampled).count(1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":141},"id":"0acKiDrIab8s","executionInfo":{"status":"error","timestamp":1714361558052,"user_tz":-360,"elapsed":17,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"534c04b2-27e9-45a5-8c31-50ea7625761d"},"execution_count":null,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-48-c74efcd358f2>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_resampled\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_resampled\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mValueError\u001b[0m: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()"]}]},{"cell_type":"code","source":["# Split train and test data\n","from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"],"metadata":{"id":"_kSgJxSVYvfn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Apply SMOTE on Train and Test Data\n","smote = SMOTE(random_state=42)\n","X_resampled, y_resampled = smote.fit_resample(X_train, y_train)"],"metadata":{"id":"c3CoAtPFZBa1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["list(y_resampled).count(0),list(y_resampled).count(1),list(y_resampled).count(2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5zuCQn5N0iGy","executionInfo":{"status":"ok","timestamp":1714359675569,"user_tz":-360,"elapsed":36,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"987ad7a3-e4fb-46a0-f3fd-e5e07e210521"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(40, 40, 40)"]},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["list(y_train).count(1), list(y_resampled).count(1)"],"metadata":{"id":"osFjnXVeZFzJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1714359675569,"user_tz":-360,"elapsed":33,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"fb27b046-dafa-4122-db26-0efd7a0c2c6c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(39, 40)"]},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["# Apply KNN\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.metrics import accuracy_score, f1_score"],"metadata":{"id":"UD1y-1a5aW4k"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","X_resampled, y_resampled = X_train, y_train\n","# Observe KNN performance and pick the best performed K value\n","accuracy_train_list = []\n","accuracy_test_list  = []\n","f1_train_list       = []\n","f1_test_list        = []\n","k_values_list       = []\n","\n","for i in range(3, 13):\n","    print('k:', i)\n","    k_values_list.append(i)\n","\n","    KNN = KNeighborsClassifier(n_neighbors=i)\n","    KNN.fit(X_resampled, y_resampled)\n","\n","    y_pred_train = KNN.predict(X_train)\n","\n","    accuracy_train = accuracy_score(y_pred_train, y_train)\n","    accuracy_train_list.append(accuracy_train)\n","\n","    f1_train = f1_score(y_pred_train, y_train, average='micro')\n","    f1_train_list.append(f1_train)\n","\n","    y_pred_test = KNN.predict(X_test)\n","\n","    accuracy_test = accuracy_score(y_pred_test, y_test)\n","    accuracy_test_list.append(accuracy_test)\n","\n","    f1_test = f1_score(y_pred_test, y_test, average='micro')\n","    f1_test_list.append(f1_test)\n","\n","    print(accuracy_train, accuracy_test)\n","    print(f1_train, f1_test, '\\n')"],"metadata":{"id":"Kv31LSFvahy3","executionInfo":{"status":"ok","timestamp":1714359675570,"user_tz":-360,"elapsed":31,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"692fba7f-a8c9-4001-b54f-29bbe49a3d0f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["k: 3\n","0.9886363636363636 0.9545454545454546\n","0.9886363636363636 0.9545454545454546 \n","\n","k: 4\n","0.9659090909090909 0.9545454545454546\n","0.9659090909090909 0.9545454545454546 \n","\n","k: 5\n","0.9659090909090909 0.9545454545454546\n","0.9659090909090909 0.9545454545454546 \n","\n","k: 6\n","0.9659090909090909 0.9545454545454546\n","0.9659090909090909 0.9545454545454546 \n","\n","k: 7\n","0.9659090909090909 0.9545454545454546\n","0.9659090909090909 0.9545454545454546 \n","\n","k: 8\n","0.9659090909090909 0.9545454545454546\n","0.9659090909090909 0.9545454545454546 \n","\n","k: 9\n","0.9659090909090909 0.9545454545454546\n","0.9659090909090909 0.9545454545454546 \n","\n","k: 10\n","0.9318181818181818 0.9545454545454546\n","0.9318181818181818 0.9545454545454546 \n","\n","k: 11\n","0.9545454545454546 0.9545454545454546\n","0.9545454545454546 0.9545454545454546 \n","\n","k: 12\n","0.9204545454545454 0.9545454545454546\n","0.9204545454545455 0.9545454545454546 \n","\n"]}]},{"cell_type":"code","source":["# Plot on KNN result\n","plt.plot(list(range(3, 13)),f1_train_list)\n","plt.plot(list(range(3, 13)),f1_test_list)\n","plt.legend(['Train', 'Test'])\n","plt.show()"],"metadata":{"id":"XAGcXhr9a0Pd","executionInfo":{"status":"ok","timestamp":1714359675570,"user_tz":-360,"elapsed":28,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"colab":{"base_uri":"https://localhost:8080/","height":430},"outputId":"537c6286-7b91-42c9-a208-64bd6d967393"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Apply KNN on best performed K value\n","KNN = KNeighborsClassifier(n_neighbors=9)\n","KNN.fit(X_train, y_train)\n","\n","y_pred_train = KNN.predict(X_train)\n","accuracy_train = accuracy_score(y_pred_train, y_train)\n","f1_train = f1_score(y_pred_train, y_train, average='weighted')\n","\n","y_pred_test = KNN.predict(X_test)\n","accuracy_test = accuracy_score(y_pred_test, y_test)\n","f1_test = f1_score(y_pred_test, y_test, average='weighted')"],"metadata":{"id":"wq-ffpTKjkkr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Apply Classification Report\n","from sklearn.metrics import classification_report\n","target_names = ['setosa', 'verginica', 'versicolor']"],"metadata":{"id":"OVZ925q5kL2T"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Show the over all performance on train data\n","print('Train Data of KNN: ','\\n')\n","print('Accuracy on Train Data: ', accuracy_train, '\\n')\n","print('F1_Score on Train Data: ', f1_train, '\\n')\n","print('Classification Report on Train Data: ', '\\n', '\\n', classification_report(y_pred_train, y_train, target_names=target_names))"],"metadata":{"id":"NdDLrLRdlu-v","executionInfo":{"status":"ok","timestamp":1714359675572,"user_tz":-360,"elapsed":25,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"78309dbd-fcca-473f-c3d8-780f9a44c6f1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Train Data of KNN:  \n","\n","Accuracy on Train Data:  0.9659090909090909 \n","\n","F1_Score on Train Data:  0.9686868686868688 \n","\n","Classification Report on Train Data:  \n"," \n","               precision    recall  f1-score   support\n","\n","      setosa       1.00      1.00      1.00        40\n","   verginica       1.00      0.93      0.96        42\n","  versicolor       0.67      1.00      0.80         6\n","\n","    accuracy                           0.97        88\n","   macro avg       0.89      0.98      0.92        88\n","weighted avg       0.98      0.97      0.97        88\n","\n"]}]},{"cell_type":"code","source":["# Show the over all performance on test data\n","print('Test Data of KNN: ','\\n')\n","print('Accuracy on Test Data: ', accuracy_test, '\\n' )\n","print('F1 Score on Test Data: ', f1_test, '\\n')\n","print('Classification Report on Test Data: ', '\\n','\\n', classification_report(y_pred_test, y_test))"],"metadata":{"id":"ad_W_jR5lvpo","executionInfo":{"status":"ok","timestamp":1714359675572,"user_tz":-360,"elapsed":22,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"ec49158e-c7d7-45d3-c43a-bc09dcf0c791"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Test Data of KNN:  \n","\n","Accuracy on Test Data:  0.9545454545454546 \n","\n","F1 Score on Test Data:  0.9762845849802372 \n","\n","Classification Report on Test Data:  \n"," \n","               precision    recall  f1-score   support\n","\n","           0       1.00      1.00      1.00        10\n","           1       1.00      0.92      0.96        12\n","           2       0.00      0.00      0.00         0\n","\n","    accuracy                           0.95        22\n","   macro avg       0.67      0.64      0.65        22\n","weighted avg       1.00      0.95      0.98        22\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}]},{"cell_type":"code","source":["# Apply Confusion Matrix\n","from sklearn.metrics import confusion_matrix\n","c_train = confusion_matrix(y_pred_train, y_train)\n","c_test  = confusion_matrix(y_pred_test, y_test)"],"metadata":{"id":"6SxqIGvVl5Gq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Results of Confusion Matrix on train and test data\n","print('Confusion Matrix on Train Data: ','\\n', c_train, '\\n')\n","print('Confusion Matrix on Test  Data: ', '\\n', c_test)"],"metadata":{"id":"lN-U2yYomDRz","executionInfo":{"status":"ok","timestamp":1714359675573,"user_tz":-360,"elapsed":19,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"bc1252b1-6f03-4229-b8fe-e29d48cc2188"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion Matrix on Train Data:  \n"," [[40  0  0]\n"," [ 0 39  3]\n"," [ 0  0  6]] \n","\n","Confusion Matrix on Test  Data:  \n"," [[10  0  0]\n"," [ 0 11  1]\n"," [ 0  0  0]]\n"]}]},{"cell_type":"code","source":["# Apply heatmap on train Data\n","sns.heatmap(c_train, annot=True)\n","plt.show()"],"metadata":{"id":"IDiVZ3AfmGrn","executionInfo":{"status":"ok","timestamp":1714359676189,"user_tz":-360,"elapsed":632,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"colab":{"base_uri":"https://localhost:8080/","height":435},"outputId":"485b4928-6ae0-4149-f557-0c28ed90bc35"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Apply heatmap on test Data\n","sns.heatmap(c_test, annot=True)\n","plt.show()"],"metadata":{"id":"EzmG4SAymLTZ","executionInfo":{"status":"ok","timestamp":1714359676189,"user_tz":-360,"elapsed":20,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"colab":{"base_uri":"https://localhost:8080/","height":430},"outputId":"342b86d2-a07d-4501-8386-452b32b7b6ef"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["\n","from sklearn.metrics import precision_recall_fscore_support\n","\n","def calculate_f1(y_true, y_pred, average='macro', labels=None):\n","    precision, recall, f1, _ = precision_recall_fscore_support(y_true, y_pred, average=average, labels=labels)\n","    return precision, recall, f1\n","\n","# Example usage\n","y_true = [0, 1, 1, 0, 1, 1, 0]\n","y_pred = [0, 0, 1, 0, 1, 1, 0]\n","\n","micro_precision, micro_recall, micro_f1 = calculate_f1(y_true, y_pred, average='micro')\n","macro_precision, macro_recall, macro_f1 = calculate_f1(y_true, y_pred, average='macro')\n","weighted_precision, weighted_recall, weighted_f1 = calculate_f1(y_true, y_pred, average='weighted')\n","\n","print(\"Micro F1:\", micro_f1)\n","print(\"Macro F1:\", macro_f1)\n","print(\"Weighted F1:\", weighted_f1)"],"metadata":{"id":"0zAMLBgfmPI9","executionInfo":{"status":"ok","timestamp":1714359676190,"user_tz":-360,"elapsed":18,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"d6573e6f-8901-4765-bb95-059ed84e72e7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Micro F1: 0.8571428571428571\n","Macro F1: 0.8571428571428571\n","Weighted F1: 0.8571428571428571\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"K2gbBIz62tct"},"execution_count":null,"outputs":[]}]}